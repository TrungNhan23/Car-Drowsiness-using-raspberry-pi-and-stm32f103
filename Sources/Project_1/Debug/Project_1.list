
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d0  080091d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080091d0  080091d0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091d0  080091d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d0  080091d0  000191d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080091d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  200001e0  080093b8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  080093b8  00021cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a15  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb7  00000000  00000000  00031c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00034bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00035998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8b5  00000000  00000000  00036610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001230a  00000000  00000000  00050ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c54e  00000000  00000000  000631cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef71d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac0  00000000  00000000  000ef770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009098 	.word	0x08009098

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009098 	.word	0x08009098

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SendSMS>:
extern uint8_t Rxcount;
extern uint32_t dataSize;
extern uint8_t check;
extern uint32_t time;

void SendSMS(){
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b0a1      	sub	sp, #132	; 0x84
 8000160:	af00      	add	r7, sp, #0
	  char mobileNumber[] = "+84919059121";  // Enter the Mobile Number you want to send to
 8000162:	4b56      	ldr	r3, [pc, #344]	; (80002bc <SendSMS+0x160>)
 8000164:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016a:	c407      	stmia	r4!, {r0, r1, r2}
 800016c:	7023      	strb	r3, [r4, #0]
	  char ATcommand[80];
	  uint8_t buffer[30] = {0};
 800016e:	2300      	movs	r3, #0
 8000170:	603b      	str	r3, [r7, #0]
 8000172:	1d3b      	adds	r3, r7, #4
 8000174:	2200      	movs	r2, #0
 8000176:	601a      	str	r2, [r3, #0]
 8000178:	605a      	str	r2, [r3, #4]
 800017a:	609a      	str	r2, [r3, #8]
 800017c:	60da      	str	r2, [r3, #12]
 800017e:	611a      	str	r2, [r3, #16]
 8000180:	615a      	str	r2, [r3, #20]
 8000182:	831a      	strh	r2, [r3, #24]
	  uint8_t ATisOK = 0;
 8000184:	2300      	movs	r3, #0
 8000186:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	  while(!ATisOK){
 800018a:	e02d      	b.n	80001e8 <SendSMS+0x8c>
	  		sprintf(ATcommand,"AT\r\n");
 800018c:	f107 0320 	add.w	r3, r7, #32
 8000190:	494b      	ldr	r1, [pc, #300]	; (80002c0 <SendSMS+0x164>)
 8000192:	4618      	mov	r0, r3
 8000194:	f008 fafa 	bl	800878c <siprintf>
	  		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000198:	f107 0320 	add.w	r3, r7, #32
 800019c:	4618      	mov	r0, r3
 800019e:	f7ff ffd5 	bl	800014c <strlen>
 80001a2:	4603      	mov	r3, r0
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	f107 0120 	add.w	r1, r7, #32
 80001aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ae:	4845      	ldr	r0, [pc, #276]	; (80002c4 <SendSMS+0x168>)
 80001b0:	f003 fd1c 	bl	8003bec <HAL_UART_Transmit>
	  		HAL_UART_Receive (&huart1, buffer, 30, 100);
 80001b4:	4639      	mov	r1, r7
 80001b6:	2364      	movs	r3, #100	; 0x64
 80001b8:	221e      	movs	r2, #30
 80001ba:	4842      	ldr	r0, [pc, #264]	; (80002c4 <SendSMS+0x168>)
 80001bc:	f003 fd99 	bl	8003cf2 <HAL_UART_Receive>
	  		HAL_Delay(100);
 80001c0:	2064      	movs	r0, #100	; 0x64
 80001c2:	f000 fc3f 	bl	8000a44 <HAL_Delay>
	  		if(strstr((char *)buffer,"A")){
 80001c6:	463b      	mov	r3, r7
 80001c8:	2141      	movs	r1, #65	; 0x41
 80001ca:	4618      	mov	r0, r3
 80001cc:	f008 fafe 	bl	80087cc <strchr>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d002      	beq.n	80001dc <SendSMS+0x80>
	  			ATisOK = 1;
 80001d6:	2301      	movs	r3, #1
 80001d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	  		}
	  		memset(buffer,0,sizeof(buffer));
 80001dc:	463b      	mov	r3, r7
 80001de:	221e      	movs	r2, #30
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f008 faca 	bl	800877c <memset>
	  while(!ATisOK){
 80001e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0cd      	beq.n	800018c <SendSMS+0x30>
	  }
	  sprintf(ATcommand,"AT+CMGF=1\r\n");
 80001f0:	f107 0320 	add.w	r3, r7, #32
 80001f4:	4934      	ldr	r1, [pc, #208]	; (80002c8 <SendSMS+0x16c>)
 80001f6:	4618      	mov	r0, r3
 80001f8:	f008 fac8 	bl	800878c <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80001fc:	f107 0320 	add.w	r3, r7, #32
 8000200:	4618      	mov	r0, r3
 8000202:	f7ff ffa3 	bl	800014c <strlen>
 8000206:	4603      	mov	r3, r0
 8000208:	b29a      	uxth	r2, r3
 800020a:	f107 0120 	add.w	r1, r7, #32
 800020e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000212:	482c      	ldr	r0, [pc, #176]	; (80002c4 <SendSMS+0x168>)
 8000214:	f003 fcea 	bl	8003bec <HAL_UART_Transmit>
	  HAL_UART_Receive (&huart1, buffer, 30, 100);
 8000218:	4639      	mov	r1, r7
 800021a:	2364      	movs	r3, #100	; 0x64
 800021c:	221e      	movs	r2, #30
 800021e:	4829      	ldr	r0, [pc, #164]	; (80002c4 <SendSMS+0x168>)
 8000220:	f003 fd67 	bl	8003cf2 <HAL_UART_Receive>
	  HAL_Delay(200);
 8000224:	20c8      	movs	r0, #200	; 0xc8
 8000226:	f000 fc0d 	bl	8000a44 <HAL_Delay>
	  memset(buffer,0,sizeof(buffer));
 800022a:	463b      	mov	r3, r7
 800022c:	221e      	movs	r2, #30
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f008 faa3 	bl	800877c <memset>
	  sprintf(ATcommand,"AT+CMGS=\"%s\"\r\n",mobileNumber);
 8000236:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800023a:	f107 0320 	add.w	r3, r7, #32
 800023e:	4923      	ldr	r1, [pc, #140]	; (80002cc <SendSMS+0x170>)
 8000240:	4618      	mov	r0, r3
 8000242:	f008 faa3 	bl	800878c <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000246:	f107 0320 	add.w	r3, r7, #32
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ff7e 	bl	800014c <strlen>
 8000250:	4603      	mov	r3, r0
 8000252:	b29a      	uxth	r2, r3
 8000254:	f107 0120 	add.w	r1, r7, #32
 8000258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800025c:	4819      	ldr	r0, [pc, #100]	; (80002c4 <SendSMS+0x168>)
 800025e:	f003 fcc5 	bl	8003bec <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000262:	20c8      	movs	r0, #200	; 0xc8
 8000264:	f000 fbee 	bl	8000a44 <HAL_Delay>
	  sprintf(ATcommand,"Be careful, your driver is sleeping right now!!!\n BSX: 59B34354%c",0x1a);
 8000268:	f107 0320 	add.w	r3, r7, #32
 800026c:	221a      	movs	r2, #26
 800026e:	4918      	ldr	r1, [pc, #96]	; (80002d0 <SendSMS+0x174>)
 8000270:	4618      	mov	r0, r3
 8000272:	f008 fa8b 	bl	800878c <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000276:	f107 0320 	add.w	r3, r7, #32
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff66 	bl	800014c <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	f107 0120 	add.w	r1, r7, #32
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <SendSMS+0x168>)
 800028e:	f003 fcad 	bl	8003bec <HAL_UART_Transmit>
	  HAL_UART_Receive (&huart1, buffer, 30, 100);
 8000292:	4639      	mov	r1, r7
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	221e      	movs	r2, #30
 8000298:	480a      	ldr	r0, [pc, #40]	; (80002c4 <SendSMS+0x168>)
 800029a:	f003 fd2a 	bl	8003cf2 <HAL_UART_Receive>
	  memset(buffer,0,sizeof(buffer));
 800029e:	463b      	mov	r3, r7
 80002a0:	221e      	movs	r2, #30
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f008 fa69 	bl	800877c <memset>
	  //HAL_Delay(4000);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <SendSMS+0x178>)
 80002b0:	f001 f9ff 	bl	80016b2 <HAL_GPIO_TogglePin>
}
 80002b4:	bf00      	nop
 80002b6:	3784      	adds	r7, #132	; 0x84
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd90      	pop	{r4, r7, pc}
 80002bc:	08009118 	.word	0x08009118
 80002c0:	080090b0 	.word	0x080090b0
 80002c4:	2000022c 	.word	0x2000022c
 80002c8:	080090b8 	.word	0x080090b8
 80002cc:	080090c4 	.word	0x080090c4
 80002d0:	080090d4 	.word	0x080090d4
 80002d4:	40011000 	.word	0x40011000

080002d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002de:	f000 fb4f 	bl	8000980 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002e2:	f000 f8b1 	bl	8000448 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002e6:	f000 f975 	bl	80005d4 <MX_GPIO_Init>
	MX_ADC1_Init();
 80002ea:	f000 f90b 	bl	8000504 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 80002ee:	f000 f947 	bl	8000580 <MX_USART1_UART_Init>
	MX_USB_DEVICE_Init();
 80002f2:	f007 fd69 	bl	8007dc8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint32_t Brightness = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	603b      	str	r3, [r7, #0]
	int cnt = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
	int isSleepy = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(GPIOC, State_Pin, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000308:	4848      	ldr	r0, [pc, #288]	; (800042c <main+0x154>)
 800030a:	f001 f9ba 	bl	8001682 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOB, LED_4_Pin, 1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start(&hadc1);
 800030e:	4848      	ldr	r0, [pc, #288]	; (8000430 <main+0x158>)
 8000310:	f000 fc94 	bl	8000c3c <HAL_ADC_Start>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Brightness = HAL_ADC_GetValue(&hadc1);
 8000314:	4846      	ldr	r0, [pc, #280]	; (8000430 <main+0x158>)
 8000316:	f000 fd6b 	bl	8000df0 <HAL_ADC_GetValue>
 800031a:	6038      	str	r0, [r7, #0]
		if (Brightness < 2400) {
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000322:	d204      	bcs.n	800032e <main+0x56>
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	4842      	ldr	r0, [pc, #264]	; (8000434 <main+0x15c>)
 800032a:	f001 f9aa 	bl	8001682 <HAL_GPIO_WritePin>
		}

		if (cnt == 60) {
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	2b3c      	cmp	r3, #60	; 0x3c
 8000332:	d10a      	bne.n	800034a <main+0x72>
			cnt = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	483d      	ldr	r0, [pc, #244]	; (8000434 <main+0x15c>)
 800033e:	f001 f9a0 	bl	8001682 <HAL_GPIO_WritePin>
			HAL_ADC_Start(&hadc1);
 8000342:	483b      	ldr	r0, [pc, #236]	; (8000430 <main+0x158>)
 8000344:	f000 fc7a 	bl	8000c3c <HAL_ADC_Start>
 8000348:	e010      	b.n	800036c <main+0x94>

		} else {
			cnt++;
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
			if(HAL_GPIO_ReadPin(GPIOA, LED_Pin) == GPIO_PIN_SET)
 8000350:	2101      	movs	r1, #1
 8000352:	4838      	ldr	r0, [pc, #224]	; (8000434 <main+0x15c>)
 8000354:	f001 f97e 	bl	8001654 <HAL_GPIO_ReadPin>
 8000358:	4603      	mov	r3, r0
 800035a:	2b01      	cmp	r3, #1
 800035c:	d103      	bne.n	8000366 <main+0x8e>
				HAL_ADC_Stop(&hadc1);
 800035e:	4834      	ldr	r0, [pc, #208]	; (8000430 <main+0x158>)
 8000360:	f000 fd1a 	bl	8000d98 <HAL_ADC_Stop>
 8000364:	e002      	b.n	800036c <main+0x94>
			else
				HAL_ADC_Start(&hadc1);
 8000366:	4832      	ldr	r0, [pc, #200]	; (8000430 <main+0x158>)
 8000368:	f000 fc68 	bl	8000c3c <HAL_ADC_Start>

		}
		if (check) {
 800036c:	4b32      	ldr	r3, [pc, #200]	; (8000438 <main+0x160>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d021      	beq.n	80003b8 <main+0xe0>
			if (ReceivedData[0] == '1') {
 8000374:	4b31      	ldr	r3, [pc, #196]	; (800043c <main+0x164>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b31      	cmp	r3, #49	; 0x31
 800037a:	d104      	bne.n	8000386 <main+0xae>
				isSleepy = 1; cnt = 0;
 800037c:	2301      	movs	r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e005      	b.n	8000392 <main+0xba>
			}
			else if (ReceivedData[0] == '2') {
 8000386:	4b2d      	ldr	r3, [pc, #180]	; (800043c <main+0x164>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b32      	cmp	r3, #50	; 0x32
 800038c:	d101      	bne.n	8000392 <main+0xba>
				SendSMS();
 800038e:	f7ff fee5 	bl	800015c <SendSMS>
			}
			for (int i = 0; i < dataSize; i++) {
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	e007      	b.n	80003a8 <main+0xd0>
				ReceivedData[i] = 0;
 8000398:	4a28      	ldr	r2, [pc, #160]	; (800043c <main+0x164>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < dataSize; i++) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <main+0x168>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d3f2      	bcc.n	8000398 <main+0xc0>
			}
			check = 0;
 80003b2:	4b21      	ldr	r3, [pc, #132]	; (8000438 <main+0x160>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
		}

		if (isSleepy == 1) {
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d1aa      	bne.n	8000314 <main+0x3c>
			if (cnt <= 20) {
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	2b14      	cmp	r3, #20
 80003c2:	dc17      	bgt.n	80003f4 <main+0x11c>
				HAL_GPIO_TogglePin(GPIOB, Buzzer_Pin);
 80003c4:	2180      	movs	r1, #128	; 0x80
 80003c6:	481f      	ldr	r0, [pc, #124]	; (8000444 <main+0x16c>)
 80003c8:	f001 f973 	bl	80016b2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, LED_4_Pin);
 80003cc:	2108      	movs	r1, #8
 80003ce:	481d      	ldr	r0, [pc, #116]	; (8000444 <main+0x16c>)
 80003d0:	f001 f96f 	bl	80016b2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, LED_3_Pin);
 80003d4:	2110      	movs	r1, #16
 80003d6:	481b      	ldr	r0, [pc, #108]	; (8000444 <main+0x16c>)
 80003d8:	f001 f96b 	bl	80016b2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, LED_2_Pin);
 80003dc:	2120      	movs	r1, #32
 80003de:	4819      	ldr	r0, [pc, #100]	; (8000444 <main+0x16c>)
 80003e0:	f001 f967 	bl	80016b2 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, LED_1_Pin);
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	4817      	ldr	r0, [pc, #92]	; (8000444 <main+0x16c>)
 80003e8:	f001 f963 	bl	80016b2 <HAL_GPIO_TogglePin>
				HAL_Delay(200);
 80003ec:	20c8      	movs	r0, #200	; 0xc8
 80003ee:	f000 fb29 	bl	8000a44 <HAL_Delay>
 80003f2:	e78f      	b.n	8000314 <main+0x3c>
			}
			else {
				isSleepy = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60bb      	str	r3, [r7, #8]
				HAL_GPIO_WritePin(GPIOB, LED_4_Pin, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2108      	movs	r1, #8
 80003fc:	4811      	ldr	r0, [pc, #68]	; (8000444 <main+0x16c>)
 80003fe:	f001 f940 	bl	8001682 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_3_Pin, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2110      	movs	r1, #16
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <main+0x16c>)
 8000408:	f001 f93b 	bl	8001682 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_2_Pin, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	2120      	movs	r1, #32
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <main+0x16c>)
 8000412:	f001 f936 	bl	8001682 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_1_Pin, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	2140      	movs	r1, #64	; 0x40
 800041a:	480a      	ldr	r0, [pc, #40]	; (8000444 <main+0x16c>)
 800041c:	f001 f931 	bl	8001682 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, Buzzer_Pin, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <main+0x16c>)
 8000426:	f001 f92c 	bl	8001682 <HAL_GPIO_WritePin>
		Brightness = HAL_ADC_GetValue(&hadc1);
 800042a:	e773      	b.n	8000314 <main+0x3c>
 800042c:	40011000 	.word	0x40011000
 8000430:	200001fc 	.word	0x200001fc
 8000434:	40010800 	.word	0x40010800
 8000438:	200015b4 	.word	0x200015b4
 800043c:	20001548 	.word	0x20001548
 8000440:	200015b0 	.word	0x200015b0
 8000444:	40010c00 	.word	0x40010c00

08000448 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b094      	sub	sp, #80	; 0x50
 800044c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800044e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000452:	2228      	movs	r2, #40	; 0x28
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f008 f990 	bl	800877c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000478:	2301      	movs	r3, #1
 800047a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000486:	2301      	movs	r3, #1
 8000488:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048a:	2302      	movs	r3, #2
 800048c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000492:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000494:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000498:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800049a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fe8e 	bl	80031c0 <HAL_RCC_OscConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x66>
		Error_Handler();
 80004aa:	f000 f915 	bl	80006d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004ae:	230f      	movs	r3, #15
 80004b0:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004be:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2101      	movs	r1, #1
 80004cc:	4618      	mov	r0, r3
 80004ce:	f003 f8f9 	bl	80036c4 <HAL_RCC_ClockConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x94>
		Error_Handler();
 80004d8:	f000 f8fe 	bl	80006d8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80004dc:	2312      	movs	r3, #18
 80004de:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004e8:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 fa77 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
		Error_Handler();
 80004f8:	f000 f8ee 	bl	80006d8 <Error_Handler>
	}
}
 80004fc:	bf00      	nop
 80004fe:	3750      	adds	r7, #80	; 0x50
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_ADC1_Init+0x74>)
 8000516:	4a19      	ldr	r2, [pc, #100]	; (800057c <MX_ADC1_Init+0x78>)
 8000518:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_ADC1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_ADC1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_ADC1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_ADC1_Init+0x74>)
 800052e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000532:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <MX_ADC1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_ADC1_Init+0x74>)
 800053c:	2201      	movs	r2, #1
 800053e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <MX_ADC1_Init+0x74>)
 8000542:	f000 faa3 	bl	8000a8c <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800054c:	f000 f8c4 	bl	80006d8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000554:	2301      	movs	r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_ADC1_Init+0x74>)
 8000562:	f000 fc51 	bl	8000e08 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800056c:	f000 f8b4 	bl	80006d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200001fc 	.word	0x200001fc
 800057c:	40012400 	.word	0x40012400

08000580 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <MX_USART1_UART_Init+0x50>)
 8000588:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 800058c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000590:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_USART1_UART_Init+0x4c>)
 80005b8:	f003 fac8 	bl	8003b4c <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80005c2:	f000 f889 	bl	80006d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000022c 	.word	0x2000022c
 80005d0:	40013800 	.word	0x40013800

080005d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <MX_GPIO_Init+0xf4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <MX_GPIO_Init+0xf4>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <MX_GPIO_Init+0xf4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0310 	and.w	r3, r3, #16
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000600:	4b31      	ldr	r3, [pc, #196]	; (80006c8 <MX_GPIO_Init+0xf4>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a30      	ldr	r2, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xf4>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <MX_GPIO_Init+0xf4>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0320 	and.w	r3, r3, #32
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <MX_GPIO_Init+0xf4>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xf4>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xf4>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_GPIO_Init+0xf4>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xf4>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xf4>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(State_GPIO_Port, State_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <MX_GPIO_Init+0xf8>)
 8000650:	f001 f817 	bl	8001682 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	481d      	ldr	r0, [pc, #116]	; (80006d0 <MX_GPIO_Init+0xfc>)
 800065a:	f001 f812 	bl	8001682 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800065e:	2200      	movs	r2, #0
 8000660:	21f8      	movs	r1, #248	; 0xf8
 8000662:	481c      	ldr	r0, [pc, #112]	; (80006d4 <MX_GPIO_Init+0x100>)
 8000664:	f001 f80d 	bl	8001682 <HAL_GPIO_WritePin>
			LED_4_Pin | LED_3_Pin | LED_2_Pin | LED_1_Pin | Buzzer_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : State_Pin */
	GPIO_InitStruct.Pin = State_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(State_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	4812      	ldr	r0, [pc, #72]	; (80006cc <MX_GPIO_Init+0xf8>)
 8000682:	f000 fe63 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000686:	2301      	movs	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0xfc>)
 800069e:	f000 fe55 	bl	800134c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_4_Pin LED_3_Pin LED_2_Pin LED_1_Pin
	 Buzzer_Pin */
	GPIO_InitStruct.Pin = LED_4_Pin | LED_3_Pin | LED_2_Pin | LED_1_Pin
 80006a2:	23f8      	movs	r3, #248	; 0xf8
 80006a4:	613b      	str	r3, [r7, #16]
			| Buzzer_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_GPIO_Init+0x100>)
 80006ba:	f000 fe47 	bl	800134c <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_MspInit+0x5c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_MspInit+0x5c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_MspInit+0x5c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x5c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x5c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_MspInit+0x60>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_MspInit+0x60>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000

08000748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <HAL_ADC_MspInit+0x6c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d121      	bne.n	80007ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_ADC_MspInit+0x70>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <HAL_ADC_MspInit+0x70>)
 800076e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0x70>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_ADC_MspInit+0x70>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <HAL_ADC_MspInit+0x70>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_ADC_MspInit+0x70>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0304 	and.w	r3, r3, #4
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079c:	2303      	movs	r3, #3
 800079e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_ADC_MspInit+0x74>)
 80007a8:	f000 fdd0 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40012400 	.word	0x40012400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d131      	bne.n	8000844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_UART_MspInit+0x90>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_UART_MspInit+0x90>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <HAL_UART_MspInit+0x94>)
 8000826:	f000 fd91 	bl	800134c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_UART_MspInit+0x94>)
 8000840:	f000 fd84 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013800 	.word	0x40013800
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 f8b5 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008ae:	f001 f83e 	bl	800192e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200017b8 	.word	0x200017b8

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f007 ff1c 	bl	8008728 <__errno>
 80008f0:	4603      	mov	r3, r0
 80008f2:	220c      	movs	r2, #12
 80008f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20005000 	.word	0x20005000
 800091c:	00000400 	.word	0x00000400
 8000920:	20000274 	.word	0x20000274
 8000924:	20001cd8 	.word	0x20001cd8

08000928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff fff8 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800093a:	490c      	ldr	r1, [pc, #48]	; (800096c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <LoopFillZerobss+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000950:	4c09      	ldr	r4, [pc, #36]	; (8000978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f007 fee9 	bl	8008734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000962:	f7ff fcb9 	bl	80002d8 <main>
  bx lr
 8000966:	4770      	bx	lr
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000970:	080091d8 	.word	0x080091d8
  ldr r2, =_sbss
 8000974:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000978:	20001cd8 	.word	0x20001cd8

0800097c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_2_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_Init+0x28>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_Init+0x28>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 fc99 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f808 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff fea2 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x58>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fcb1 	bl	8001332 <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 fc79 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_InitTick+0x5c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000278 	.word	0x20000278

08000a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000278 	.word	0x20000278

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fff0 	bl	8000a30 <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffe0 	bl	8000a30 <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e0be      	b.n	8000c2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d109      	bne.n	8000ad0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fe3c 	bl	8000748 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 faeb 	bl	80010ac <ADC_ConversionStop_Disable>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ade:	f003 0310 	and.w	r3, r3, #16
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f040 8099 	bne.w	8000c1a <HAL_ADC_Init+0x18e>
 8000ae8:	7dfb      	ldrb	r3, [r7, #23]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f040 8095 	bne.w	8000c1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000af8:	f023 0302 	bic.w	r3, r3, #2
 8000afc:	f043 0202 	orr.w	r2, r3, #2
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7b1b      	ldrb	r3, [r3, #12]
 8000b12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b24:	d003      	beq.n	8000b2e <HAL_ADC_Init+0xa2>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d102      	bne.n	8000b34 <HAL_ADC_Init+0xa8>
 8000b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b32:	e000      	b.n	8000b36 <HAL_ADC_Init+0xaa>
 8000b34:	2300      	movs	r3, #0
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7d1b      	ldrb	r3, [r3, #20]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d119      	bne.n	8000b78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7b1b      	ldrb	r3, [r3, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d109      	bne.n	8000b60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	035a      	lsls	r2, r3, #13
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	e00b      	b.n	8000b78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	f043 0220 	orr.w	r2, r3, #32
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <HAL_ADC_Init+0x1a8>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	68b9      	ldr	r1, [r7, #8]
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_Init+0x126>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d104      	bne.n	8000bbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	051b      	lsls	r3, r3, #20
 8000bba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_ADC_Init+0x1ac>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d10b      	bne.n	8000bf8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	f023 0303 	bic.w	r3, r3, #3
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf6:	e018      	b.n	8000c2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	f023 0312 	bic.w	r3, r3, #18
 8000c00:	f043 0210 	orr.w	r2, r3, #16
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0c:	f043 0201 	orr.w	r2, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c18:	e007      	b.n	8000c2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f043 0210 	orr.w	r2, r3, #16
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	ffe1f7fd 	.word	0xffe1f7fd
 8000c38:	ff1f0efe 	.word	0xff1f0efe

08000c3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_ADC_Start+0x1a>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e098      	b.n	8000d88 <HAL_ADC_Start+0x14c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 f9ca 	bl	8000ff8 <ADC_Enable>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8087 	bne.w	8000d7e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <HAL_ADC_Start+0x154>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d105      	bne.n	8000c9a <HAL_ADC_Start+0x5e>
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d115      	bne.n	8000cc6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d026      	beq.n	8000d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cc4:	e01d      	b.n	8000d02 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d004      	beq.n	8000ce6 <HAL_ADC_Start+0xaa>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a2b      	ldr	r2, [pc, #172]	; (8000d90 <HAL_ADC_Start+0x154>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10d      	bne.n	8000d02 <HAL_ADC_Start+0xc6>
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	f023 0206 	bic.w	r2, r3, #6
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1a:	e002      	b.n	8000d22 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f06f 0202 	mvn.w	r2, #2
 8000d32:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d42:	d113      	bne.n	8000d6c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_ADC_Start+0x154>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d105      	bne.n	8000d5a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_ADC_Start+0x158>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d108      	bne.n	8000d6c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	e00c      	b.n	8000d86 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	e003      	b.n	8000d86 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40012800 	.word	0x40012800
 8000d94:	40012400 	.word	0x40012400

08000d98 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Stop+0x1a>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e01a      	b.n	8000de8 <HAL_ADC_Stop+0x50>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f976 	bl	80010ac <ADC_ConversionStop_Disable>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d109      	bne.n	8000dde <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	f043 0201 	orr.w	r2, r3, #1
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <HAL_ADC_ConfigChannel+0x20>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e0dc      	b.n	8000fe2 <HAL_ADC_ConfigChannel+0x1da>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d81c      	bhi.n	8000e72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	3b05      	subs	r3, #5
 8000e4a:	221f      	movs	r2, #31
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4019      	ands	r1, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	3b05      	subs	r3, #5
 8000e64:	fa00 f203 	lsl.w	r2, r0, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e70:	e03c      	b.n	8000eec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b0c      	cmp	r3, #12
 8000e78:	d81c      	bhi.n	8000eb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b23      	subs	r3, #35	; 0x23
 8000e8c:	221f      	movs	r2, #31
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	4019      	ands	r1, r3
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3b23      	subs	r3, #35	; 0x23
 8000ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb2:	e01b      	b.n	8000eec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3b41      	subs	r3, #65	; 0x41
 8000ec6:	221f      	movs	r2, #31
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4019      	ands	r1, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	3b41      	subs	r3, #65	; 0x41
 8000ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b09      	cmp	r3, #9
 8000ef2:	d91c      	bls.n	8000f2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	3b1e      	subs	r3, #30
 8000f06:	2207      	movs	r2, #7
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4019      	ands	r1, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	6898      	ldr	r0, [r3, #8]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b1e      	subs	r3, #30
 8000f20:	fa00 f203 	lsl.w	r2, r0, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	e019      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6919      	ldr	r1, [r3, #16]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2207      	movs	r2, #7
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4019      	ands	r1, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	6898      	ldr	r0, [r3, #8]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b10      	cmp	r3, #16
 8000f68:	d003      	beq.n	8000f72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f6e:	2b11      	cmp	r3, #17
 8000f70:	d132      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_ADC_ConfigChannel+0x1e4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d125      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d126      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b10      	cmp	r3, #16
 8000fa0:	d11a      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	0c9a      	lsrs	r2, r3, #18
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb8:	e002      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f9      	bne.n	8000fba <HAL_ADC_ConfigChannel+0x1b2>
 8000fc6:	e007      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	f043 0220 	orr.w	r2, r3, #32
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40012400 	.word	0x40012400
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d040      	beq.n	8001098 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0201 	orr.w	r2, r2, #1
 8001024:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <ADC_Enable+0xac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <ADC_Enable+0xb0>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	0c9b      	lsrs	r3, r3, #18
 8001032:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001034:	e002      	b.n	800103c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3b01      	subs	r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f9      	bne.n	8001036 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001042:	f7ff fcf5 	bl	8000a30 <HAL_GetTick>
 8001046:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001048:	e01f      	b.n	800108a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800104a:	f7ff fcf1 	bl	8000a30 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d918      	bls.n	800108a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d011      	beq.n	800108a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f043 0210 	orr.w	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e007      	b.n	800109a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d1d8      	bne.n	800104a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000000 	.word	0x20000000
 80010a8:	431bde83 	.word	0x431bde83

080010ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d12e      	bne.n	8001124 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010d6:	f7ff fcab 	bl	8000a30 <HAL_GetTick>
 80010da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010dc:	e01b      	b.n	8001116 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010de:	f7ff fca7 	bl	8000a30 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d914      	bls.n	8001116 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10d      	bne.n	8001116 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	d0dc      	beq.n	80010de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4906      	ldr	r1, [pc, #24]	; (80011c8 <__NVIC_EnableIRQ+0x34>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff90 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff2d 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff42 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff90 	bl	8001220 <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5f 	bl	80011cc <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff35 	bl	8001194 <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa2 	bl	8001284 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b08b      	sub	sp, #44	; 0x2c
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e169      	b.n	8001634 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001360:	2201      	movs	r2, #1
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 8158 	bne.w	800162e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a9a      	ldr	r2, [pc, #616]	; (80015ec <HAL_GPIO_Init+0x2a0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d05e      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 8001388:	4a98      	ldr	r2, [pc, #608]	; (80015ec <HAL_GPIO_Init+0x2a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d875      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 800138e:	4a98      	ldr	r2, [pc, #608]	; (80015f0 <HAL_GPIO_Init+0x2a4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d058      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 8001394:	4a96      	ldr	r2, [pc, #600]	; (80015f0 <HAL_GPIO_Init+0x2a4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d86f      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 800139a:	4a96      	ldr	r2, [pc, #600]	; (80015f4 <HAL_GPIO_Init+0x2a8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d052      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013a0:	4a94      	ldr	r2, [pc, #592]	; (80015f4 <HAL_GPIO_Init+0x2a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d869      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013a6:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <HAL_GPIO_Init+0x2ac>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d04c      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013ac:	4a92      	ldr	r2, [pc, #584]	; (80015f8 <HAL_GPIO_Init+0x2ac>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d863      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013b2:	4a92      	ldr	r2, [pc, #584]	; (80015fc <HAL_GPIO_Init+0x2b0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d046      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
 80013b8:	4a90      	ldr	r2, [pc, #576]	; (80015fc <HAL_GPIO_Init+0x2b0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d85d      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d82a      	bhi.n	8001418 <HAL_GPIO_Init+0xcc>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d859      	bhi.n	800147a <HAL_GPIO_Init+0x12e>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <HAL_GPIO_Init+0x80>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001421 	.word	0x08001421
 80013d4:	08001433 	.word	0x08001433
 80013d8:	08001475 	.word	0x08001475
 80013dc:	0800147b 	.word	0x0800147b
 80013e0:	0800147b 	.word	0x0800147b
 80013e4:	0800147b 	.word	0x0800147b
 80013e8:	0800147b 	.word	0x0800147b
 80013ec:	0800147b 	.word	0x0800147b
 80013f0:	0800147b 	.word	0x0800147b
 80013f4:	0800147b 	.word	0x0800147b
 80013f8:	0800147b 	.word	0x0800147b
 80013fc:	0800147b 	.word	0x0800147b
 8001400:	0800147b 	.word	0x0800147b
 8001404:	0800147b 	.word	0x0800147b
 8001408:	0800147b 	.word	0x0800147b
 800140c:	0800147b 	.word	0x0800147b
 8001410:	08001429 	.word	0x08001429
 8001414:	0800143d 	.word	0x0800143d
 8001418:	4a79      	ldr	r2, [pc, #484]	; (8001600 <HAL_GPIO_Init+0x2b4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141e:	e02c      	b.n	800147a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e029      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	3304      	adds	r3, #4
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e024      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	3308      	adds	r3, #8
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e01f      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	330c      	adds	r3, #12
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e01a      	b.n	800147c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144e:	2304      	movs	r3, #4
 8001450:	623b      	str	r3, [r7, #32]
          break;
 8001452:	e013      	b.n	800147c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d105      	bne.n	8001468 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145c:	2308      	movs	r3, #8
 800145e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	611a      	str	r2, [r3, #16]
          break;
 8001466:	e009      	b.n	800147c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001468:	2308      	movs	r3, #8
 800146a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	615a      	str	r2, [r3, #20]
          break;
 8001472:	e003      	b.n	800147c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x130>
          break;
 800147a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2bff      	cmp	r3, #255	; 0xff
 8001480:	d801      	bhi.n	8001486 <HAL_GPIO_Init+0x13a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	e001      	b.n	800148a <HAL_GPIO_Init+0x13e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d802      	bhi.n	8001498 <HAL_GPIO_Init+0x14c>
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x152>
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	3b08      	subs	r3, #8
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	210f      	movs	r1, #15
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	6a39      	ldr	r1, [r7, #32]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	431a      	orrs	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80b1 	beq.w	800162e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014cc:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x2b8>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_GPIO_Init+0x2bc>)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a40      	ldr	r2, [pc, #256]	; (800160c <HAL_GPIO_Init+0x2c0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d013      	beq.n	8001538 <HAL_GPIO_Init+0x1ec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <HAL_GPIO_Init+0x2c4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d00d      	beq.n	8001534 <HAL_GPIO_Init+0x1e8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a3e      	ldr	r2, [pc, #248]	; (8001614 <HAL_GPIO_Init+0x2c8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0x1e4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3d      	ldr	r2, [pc, #244]	; (8001618 <HAL_GPIO_Init+0x2cc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d101      	bne.n	800152c <HAL_GPIO_Init+0x1e0>
 8001528:	2303      	movs	r3, #3
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 800152c:	2304      	movs	r3, #4
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x1ee>
 8001538:	2300      	movs	r3, #0
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154a:	492f      	ldr	r1, [pc, #188]	; (8001608 <HAL_GPIO_Init+0x2bc>)
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	492c      	ldr	r1, [pc, #176]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]
 8001570:	e006      	b.n	8001580 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	43db      	mvns	r3, r3
 800157a:	4928      	ldr	r1, [pc, #160]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800157c:	4013      	ands	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	4922      	ldr	r1, [pc, #136]	; (800161c <HAL_GPIO_Init+0x2d0>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	60cb      	str	r3, [r1, #12]
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_GPIO_Init+0x2d0>)
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	491e      	ldr	r1, [pc, #120]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4918      	ldr	r1, [pc, #96]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d021      	beq.n	8001620 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	490e      	ldr	r1, [pc, #56]	; (800161c <HAL_GPIO_Init+0x2d0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e021      	b.n	800162e <HAL_GPIO_Init+0x2e2>
 80015ea:	bf00      	nop
 80015ec:	10320000 	.word	0x10320000
 80015f0:	10310000 	.word	0x10310000
 80015f4:	10220000 	.word	0x10220000
 80015f8:	10210000 	.word	0x10210000
 80015fc:	10120000 	.word	0x10120000
 8001600:	10110000 	.word	0x10110000
 8001604:	40021000 	.word	0x40021000
 8001608:	40010000 	.word	0x40010000
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00
 8001614:	40011000 	.word	0x40011000
 8001618:	40011400 	.word	0x40011400
 800161c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_GPIO_Init+0x304>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	43db      	mvns	r3, r3
 8001628:	4909      	ldr	r1, [pc, #36]	; (8001650 <HAL_GPIO_Init+0x304>)
 800162a:	4013      	ands	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	fa22 f303 	lsr.w	r3, r2, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	f47f ae8e 	bne.w	8001360 <HAL_GPIO_Init+0x14>
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	372c      	adds	r7, #44	; 0x2c
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40010400 	.word	0x40010400

08001654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e001      	b.n	8001676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	807b      	strh	r3, [r7, #2]
 800168e:	4613      	mov	r3, r2
 8001690:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001692:	787b      	ldrb	r3, [r7, #1]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001698:	887a      	ldrh	r2, [r7, #2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	041a      	lsls	r2, r3, #16
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	611a      	str	r2, [r3, #16]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c4:	887a      	ldrh	r2, [r7, #2]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	041a      	lsls	r2, r3, #16
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	400b      	ands	r3, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	611a      	str	r2, [r3, #16]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af06      	add	r7, sp, #24
 80016ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0f1      	b.n	80018da <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f006 fd62 	bl	80081d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2203      	movs	r2, #3
 8001714:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fc9d 	bl	800405c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	687e      	ldr	r6, [r7, #4]
 800172a:	466d      	mov	r5, sp
 800172c:	f106 0410 	add.w	r4, r6, #16
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	602b      	str	r3, [r5, #0]
 8001738:	1d33      	adds	r3, r6, #4
 800173a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f002 fc67 	bl	8004010 <USB_CoreInit>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0c2      	b.n	80018da <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fc98 	bl	8004090 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e040      	b.n	80017e8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3301      	adds	r3, #1
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3303      	adds	r3, #3
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	333c      	adds	r3, #60	; 0x3c
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	3340      	adds	r3, #64	; 0x40
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3b9      	bcc.n	8001766 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e044      	b.n	8001882 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	f203 1369 	addw	r3, r3, #361	; 0x169
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	3301      	adds	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d3b5      	bcc.n	80017f8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	687e      	ldr	r6, [r7, #4]
 8001894:	466d      	mov	r5, sp
 8001896:	f106 0410 	add.w	r4, r6, #16
 800189a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	602b      	str	r3, [r5, #0]
 80018a2:	1d33      	adds	r3, r6, #4
 80018a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a6:	6838      	ldr	r0, [r7, #0]
 80018a8:	f002 fbfe 	bl	80040a8 <USB_DevInit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2202      	movs	r2, #2
 80018b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00d      	b.n	80018da <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 fe7f 	bl	80065d6 <USB_DevDisconnect>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_PCD_Start+0x16>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e016      	b.n	8001926 <HAL_PCD_Start+0x44>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fb93 	bl	8004030 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800190a:	2101      	movs	r1, #1
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f006 fed4 	bl	80086ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fe53 	bl	80065c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fe55 	bl	80065ea <USB_ReadInterrupts>
 8001940:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fb1b 	bl	8001f88 <PCD_EP_ISR_Handler>

    return;
 8001952:	e119      	b.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	2b00      	cmp	r3, #0
 800195c:	d013      	beq.n	8001986 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001966:	b29a      	uxth	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001970:	b292      	uxth	r2, r2
 8001972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f006 fca7 	bl	80082ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f905 	bl	8001b8e <HAL_PCD_SetAddress>

    return;
 8001984:	e100      	b.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00c      	beq.n	80019aa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019a2:	b292      	uxth	r2, r2
 80019a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019a8:	e0ee      	b.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00c      	beq.n	80019ce <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019c6:	b292      	uxth	r2, r2
 80019c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019cc:	e0dc      	b.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d027      	beq.n	8001a28 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0204 	bic.w	r2, r2, #4
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0208 	bic.w	r2, r2, #8
 8001a02:	b292      	uxth	r2, r2
 8001a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f006 fc97 	bl	800833c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a20:	b292      	uxth	r2, r2
 8001a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a26:	e0af      	b.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8083 	beq.w	8001b3a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
 8001a38:	e010      	b.n	8001a5c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	7ffb      	ldrb	r3, [r7, #31]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	441a      	add	r2, r3
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	8812      	ldrh	r2, [r2, #0]
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	3320      	adds	r3, #32
 8001a50:	443b      	add	r3, r7
 8001a52:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	77fb      	strb	r3, [r7, #31]
 8001a5c:	7ffb      	ldrb	r3, [r7, #31]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d9eb      	bls.n	8001a3a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	b292      	uxth	r2, r2
 8001a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001a92:	bf00      	nop
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f6      	beq.n	8001a94 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	77fb      	strb	r3, [r7, #31]
 8001ac2:	e00f      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4611      	mov	r1, r2
 8001acc:	7ffa      	ldrb	r2, [r7, #31]
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	440a      	add	r2, r1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	3320      	adds	r3, #32
 8001ad6:	443b      	add	r3, r7
 8001ad8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001adc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	77fb      	strb	r3, [r7, #31]
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	2b07      	cmp	r3, #7
 8001ae8:	d9ec      	bls.n	8001ac4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0208 	orr.w	r2, r2, #8
 8001afc:	b292      	uxth	r2, r2
 8001afe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0204 	orr.w	r2, r2, #4
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f006 fbe8 	bl	8008308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b38:	e026      	b.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00f      	beq.n	8001b64 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b56:	b292      	uxth	r2, r2
 8001b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f006 fba6 	bl	80082ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b62:	e011      	b.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00c      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b80:	b292      	uxth	r2, r2
 8001b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b86:	bf00      	nop
  }
}
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_SetAddress+0x1a>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e013      	b.n	8001bd0 <HAL_PCD_SetAddress+0x42>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 fceb 	bl	800659c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	4608      	mov	r0, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	70fb      	strb	r3, [r7, #3]
 8001bea:	460b      	mov	r3, r1
 8001bec:	803b      	strh	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0e      	bge.n	8001c1c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	705a      	strb	r2, [r3, #1]
 8001c1a:	e00e      	b.n	8001c3a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c46:	883a      	ldrh	r2, [r7, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	78ba      	ldrb	r2, [r7, #2]
 8001c50:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d102      	bne.n	8001c5e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_PCD_EP_Open+0x94>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e00e      	b.n	8001c8a <HAL_PCD_EP_Open+0xb2>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68f9      	ldr	r1, [r7, #12]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fa34 	bl	80040e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c88:	7afb      	ldrb	r3, [r7, #11]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da0e      	bge.n	8001cc4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	705a      	strb	r2, [r3, #1]
 8001cc2:	e00e      	b.n	8001ce2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0207 	and.w	r2, r3, #7
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_EP_Close+0x6a>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e00e      	b.n	8001d1a <HAL_PCD_EP_Close+0x88>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 fdac 	bl	8004868 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	7afb      	ldrb	r3, [r7, #11]
 8001d34:	f003 0207 	and.w	r2, r3, #7
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6979      	ldr	r1, [r7, #20]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 ff63 	bl	8004c40 <USB_EPStartXfer>

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 0207 	and.w	r2, r3, #7
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 ff15 	bl	8004c40 <USB_EPStartXfer>

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 0207 	and.w	r2, r3, #7
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d901      	bls.n	8001e3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e04c      	b.n	8001ed8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da0e      	bge.n	8001e64 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	705a      	strb	r2, [r3, #1]
 8001e62:	e00c      	b.n	8001e7e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_PCD_EP_SetStall+0x7e>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e01c      	b.n	8001ed8 <HAL_PCD_EP_SetStall+0xb8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 fa78 	bl	80063a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4610      	mov	r0, r2
 8001eca:	f004 fb9d 	bl	8006608 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d901      	bls.n	8001efe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e040      	b.n	8001f80 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da0e      	bge.n	8001f24 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	705a      	strb	r2, [r3, #1]
 8001f22:	e00e      	b.n	8001f42 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 0207 	and.w	r2, r3, #7
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_PCD_EP_ClrStall+0x82>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e00e      	b.n	8001f80 <HAL_PCD_EP_ClrStall+0xa0>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 fa66 	bl	8006442 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b096      	sub	sp, #88	; 0x58
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f90:	e3bf      	b.n	8002712 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001fac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 8179 	bne.w	80022a8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001fb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d152      	bne.n	8002068 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	81fb      	strh	r3, [r7, #14]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3328      	adds	r3, #40	; 0x28
 8001fea:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	3302      	adds	r3, #2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002016:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	441a      	add	r2, r3
 8002022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002024:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002026:	2100      	movs	r1, #0
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f006 f926 	bl	800827a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 836b 	beq.w	8002712 <PCD_EP_ISR_Handler+0x78a>
 800203c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f040 8366 	bne.w	8002712 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002052:	b2da      	uxtb	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b292      	uxth	r2, r2
 800205a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002066:	e354      	b.n	8002712 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800206e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800207a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800207e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002082:	2b00      	cmp	r3, #0
 8002084:	d034      	beq.n	80020f0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	3306      	adds	r3, #6
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80020c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	f004 faef 	bl	80066a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020d6:	4013      	ands	r3, r2
 80020d8:	823b      	strh	r3, [r7, #16]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	8a3a      	ldrh	r2, [r7, #16]
 80020e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e4:	b292      	uxth	r2, r2
 80020e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f006 f899 	bl	8008220 <HAL_PCD_SetupStageCallback>
 80020ee:	e310      	b.n	8002712 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020f0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f280 830c 	bge.w	8002712 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29a      	uxth	r2, r3
 8002102:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002106:	4013      	ands	r3, r2
 8002108:	83fb      	strh	r3, [r7, #30]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	8bfa      	ldrh	r2, [r7, #30]
 8002110:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002114:	b292      	uxth	r2, r2
 8002116:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	3306      	adds	r3, #6
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002142:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d019      	beq.n	8002180 <PCD_EP_ISR_Handler+0x1f8>
 800214c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215a:	6959      	ldr	r1, [r3, #20]
 800215c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002164:	b29b      	uxth	r3, r3
 8002166:	f004 fa9f 	bl	80066a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800216a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	441a      	add	r2, r3
 8002174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002176:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002178:	2100      	movs	r1, #0
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f006 f862 	bl	8008244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800218a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800218e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 82bd 	bne.w	8002712 <PCD_EP_ISR_Handler+0x78a>
 8002198:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800219c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80021a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80021a4:	f000 82b5 	beq.w	8002712 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4413      	add	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	801a      	strh	r2, [r3, #0]
 80021d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b3e      	cmp	r3, #62	; 0x3e
 80021de:	d91d      	bls.n	800221c <PCD_EP_ISR_Handler+0x294>
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	647b      	str	r3, [r7, #68]	; 0x44
 80021e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <PCD_EP_ISR_Handler+0x272>
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	3b01      	subs	r3, #1
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002202:	b29b      	uxth	r3, r3
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	b29b      	uxth	r3, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002214:	b29a      	uxth	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	801a      	strh	r2, [r3, #0]
 800221a:	e026      	b.n	800226a <PCD_EP_ISR_Handler+0x2e2>
 800221c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <PCD_EP_ISR_Handler+0x2b2>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002232:	b29a      	uxth	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	e017      	b.n	800226a <PCD_EP_ISR_Handler+0x2e2>
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
 8002242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <PCD_EP_ISR_Handler+0x2cc>
 800224e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002250:	3301      	adds	r3, #1
 8002252:	647b      	str	r3, [r7, #68]	; 0x44
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29a      	uxth	r2, r3
 800225a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800225c:	b29b      	uxth	r3, r3
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	b29b      	uxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b29a      	uxth	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	827b      	strh	r3, [r7, #18]
 800227c:	8a7b      	ldrh	r3, [r7, #18]
 800227e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002282:	827b      	strh	r3, [r7, #18]
 8002284:	8a7b      	ldrh	r3, [r7, #18]
 8002286:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800228a:	827b      	strh	r3, [r7, #18]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	8a7b      	ldrh	r3, [r7, #18]
 8002292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800229a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8013      	strh	r3, [r2, #0]
 80022a6:	e234      	b.n	8002712 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f280 80fc 	bge.w	80024be <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022dc:	4013      	ands	r3, r2
 80022de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80022f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022f8:	b292      	uxth	r2, r2
 80022fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022fc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002314:	7b1b      	ldrb	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d125      	bne.n	8002366 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	3306      	adds	r3, #6
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002342:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002346:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8092 	beq.w	8002474 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002356:	6959      	ldr	r1, [r3, #20]
 8002358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235a:	88da      	ldrh	r2, [r3, #6]
 800235c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002360:	f004 f9a2 	bl	80066a8 <USB_ReadPMA>
 8002364:	e086      	b.n	8002474 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	78db      	ldrb	r3, [r3, #3]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d10a      	bne.n	8002384 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800236e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002372:	461a      	mov	r2, r3
 8002374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f9d9 	bl	800272e <HAL_PCD_EP_DB_Receive>
 800237c:	4603      	mov	r3, r0
 800237e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002382:	e077      	b.n	8002474 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	441a      	add	r2, r3
 80023b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d024      	beq.n	800242c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	3302      	adds	r3, #2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800240e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02e      	beq.n	8002474 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241c:	6959      	ldr	r1, [r3, #20]
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	891a      	ldrh	r2, [r3, #8]
 8002422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002426:	f004 f93f 	bl	80066a8 <USB_ReadPMA>
 800242a:	e023      	b.n	8002474 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002434:	b29b      	uxth	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	3306      	adds	r3, #6
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002454:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002458:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002466:	6959      	ldr	r1, [r3, #20]
 8002468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246a:	895a      	ldrh	r2, [r3, #10]
 800246c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002470:	f004 f91a 	bl	80066a8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800247c:	441a      	add	r2, r3
 800247e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002480:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800248a:	441a      	add	r2, r3
 800248c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <PCD_EP_ISR_Handler+0x51c>
 8002498:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800249c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d206      	bcs.n	80024b2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f005 feca 	bl	8008244 <HAL_PCD_DataOutStageCallback>
 80024b0:	e005      	b.n	80024be <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fbc1 	bl	8004c40 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8123 	beq.w	8002712 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80024cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	441a      	add	r2, r3
 800250c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002518:	b29b      	uxth	r3, r3
 800251a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800251c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251e:	78db      	ldrb	r3, [r3, #3]
 8002520:	2b01      	cmp	r3, #1
 8002522:	f040 80a2 	bne.w	800266a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800252c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8093 	beq.w	800265c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002536:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d046      	beq.n	80025d0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d126      	bne.n	8002598 <PCD_EP_ISR_Handler+0x610>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	4413      	add	r3, r2
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
 8002562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	011a      	lsls	r2, r3, #4
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	4413      	add	r3, r2
 800256c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002570:	623b      	str	r3, [r7, #32]
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257c:	b29a      	uxth	r2, r3
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002590:	b29a      	uxth	r2, r3
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	e061      	b.n	800265c <PCD_EP_ISR_Handler+0x6d4>
 8002598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259a:	785b      	ldrb	r3, [r3, #1]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d15d      	bne.n	800265c <PCD_EP_ISR_Handler+0x6d4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	4413      	add	r3, r2
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	011a      	lsls	r2, r3, #4
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	4413      	add	r3, r2
 80025c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	2200      	movs	r2, #0
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e045      	b.n	800265c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d126      	bne.n	800262c <PCD_EP_ISR_Handler+0x6a4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	4413      	add	r3, r2
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	011a      	lsls	r2, r3, #4
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	4413      	add	r3, r2
 8002600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002610:	b29a      	uxth	r2, r3
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	801a      	strh	r2, [r3, #0]
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002624:	b29a      	uxth	r2, r3
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	e017      	b.n	800265c <PCD_EP_ISR_Handler+0x6d4>
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	785b      	ldrb	r3, [r3, #1]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d113      	bne.n	800265c <PCD_EP_ISR_Handler+0x6d4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	4413      	add	r3, r2
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	011a      	lsls	r2, r3, #4
 800264c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264e:	4413      	add	r3, r2
 8002650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	2200      	movs	r2, #0
 800265a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f005 fe09 	bl	800827a <HAL_PCD_DataInStageCallback>
 8002668:	e053      	b.n	8002712 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800266a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d146      	bne.n	8002704 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	3302      	adds	r3, #2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d907      	bls.n	80026be <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80026ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026b6:	1ad2      	subs	r2, r2, r3
 80026b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ba:	619a      	str	r2, [r3, #24]
 80026bc:	e002      	b.n	80026c4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80026be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f005 fdd1 	bl	800827a <HAL_PCD_DataInStageCallback>
 80026d8:	e01b      	b.n	8002712 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026e2:	441a      	add	r2, r3
 80026e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026f0:	441a      	add	r2, r3
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fa9f 	bl	8004c40 <USB_EPStartXfer>
 8002702:	e006      	b.n	8002712 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002704:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002708:	461a      	mov	r2, r3
 800270a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f91b 	bl	8002948 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800271a:	b29b      	uxth	r3, r3
 800271c:	b21b      	sxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	f6ff ac37 	blt.w	8001f92 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3758      	adds	r7, #88	; 0x58
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b088      	sub	sp, #32
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	4613      	mov	r3, r2
 800273a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d07e      	beq.n	8002844 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	3302      	adds	r3, #2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	8b7b      	ldrh	r3, [r7, #26]
 8002776:	429a      	cmp	r2, r3
 8002778:	d306      	bcc.n	8002788 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	8b7b      	ldrh	r3, [r7, #26]
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	619a      	str	r2, [r3, #24]
 8002786:	e002      	b.n	800278e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d123      	bne.n	80027de <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	833b      	strh	r3, [r7, #24]
 80027b2:	8b3b      	ldrh	r3, [r7, #24]
 80027b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027b8:	833b      	strh	r3, [r7, #24]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	441a      	add	r2, r3
 80027c8:	8b3b      	ldrh	r3, [r7, #24]
 80027ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027da:	b29b      	uxth	r3, r3
 80027dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01f      	beq.n	8002828 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	82fb      	strh	r3, [r7, #22]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	8afb      	ldrh	r3, [r7, #22]
 8002814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002820:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002824:	b29b      	uxth	r3, r3
 8002826:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002828:	8b7b      	ldrh	r3, [r7, #26]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8087 	beq.w	800293e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	6959      	ldr	r1, [r3, #20]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	891a      	ldrh	r2, [r3, #8]
 800283c:	8b7b      	ldrh	r3, [r7, #26]
 800283e:	f003 ff33 	bl	80066a8 <USB_ReadPMA>
 8002842:	e07c      	b.n	800293e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284c:	b29b      	uxth	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	3306      	adds	r3, #6
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	8b7b      	ldrh	r3, [r7, #26]
 8002874:	429a      	cmp	r2, r3
 8002876:	d306      	bcc.n	8002886 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	8b7b      	ldrh	r3, [r7, #26]
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	619a      	str	r2, [r3, #24]
 8002884:	e002      	b.n	800288c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d123      	bne.n	80028dc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	83fb      	strh	r3, [r7, #30]
 80028b0:	8bfb      	ldrh	r3, [r7, #30]
 80028b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028b6:	83fb      	strh	r3, [r7, #30]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	8bfb      	ldrh	r3, [r7, #30]
 80028c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d8:	b29b      	uxth	r3, r3
 80028da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11f      	bne.n	8002926 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	83bb      	strh	r3, [r7, #28]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	441a      	add	r2, r3
 8002910:	8bbb      	ldrh	r3, [r7, #28]
 8002912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002922:	b29b      	uxth	r3, r3
 8002924:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002926:	8b7b      	ldrh	r3, [r7, #26]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	895a      	ldrh	r2, [r3, #10]
 8002938:	8b7b      	ldrh	r3, [r7, #26]
 800293a:	f003 feb5 	bl	80066a8 <USB_ReadPMA>
    }
  }

  return count;
 800293e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0a4      	sub	sp, #144	; 0x90
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 81dd 	beq.w	8002d1c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	3302      	adds	r3, #2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002996:	429a      	cmp	r2, r3
 8002998:	d907      	bls.n	80029aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	619a      	str	r2, [r3, #24]
 80029a8:	e002      	b.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 80b9 	bne.w	8002b2c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d126      	bne.n	8002a10 <HAL_PCD_EP_DB_Transmit+0xc8>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	4413      	add	r3, r2
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	011a      	lsls	r2, r3, #4
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	4413      	add	r3, r2
 80029e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	e01a      	b.n	8002a46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d116      	bne.n	8002a46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	4413      	add	r3, r2
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	011a      	lsls	r2, r3, #4
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	4413      	add	r3, r2
 8002a3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d126      	bne.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	011a      	lsls	r2, r3, #4
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e017      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d113      	bne.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	4413      	add	r3, r2
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	011a      	lsls	r2, r3, #4
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f005 fbce 	bl	800827a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 82fc 	beq.w	80030e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	82fb      	strh	r3, [r7, #22]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	8afb      	ldrh	r3, [r7, #22]
 8002b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	8013      	strh	r3, [r2, #0]
 8002b2a:	e2da      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d021      	beq.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	f040 82ae 	bne.w	80030e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b8e:	441a      	add	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b9c:	441a      	add	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d30b      	bcc.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	621a      	str	r2, [r3, #32]
 8002bc4:	e017      	b.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002bce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bde:	e00a      	b.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d165      	bne.n	8002cca <HAL_PCD_EP_DB_Transmit+0x382>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	4413      	add	r3, r2
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	011a      	lsls	r2, r3, #4
 8002c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002c3c:	d91d      	bls.n	8002c7a <HAL_PCD_EP_DB_Transmit+0x332>
 8002c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x310>
 8002c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c54:	3b01      	subs	r3, #1
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	801a      	strh	r2, [r3, #0]
 8002c78:	e044      	b.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_PCD_EP_DB_Transmit+0x350>
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	e035      	b.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cae:	3301      	adds	r3, #1
 8002cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	029b      	lsls	r3, r3, #10
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	e01c      	b.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d118      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce6:	4413      	add	r3, r2
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	011a      	lsls	r2, r3, #4
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6959      	ldr	r1, [r3, #20]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	891a      	ldrh	r2, [r3, #8]
 8002d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f003 fc82 	bl	800661e <USB_WritePMA>
 8002d1a:	e1e2      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3306      	adds	r3, #6
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d44:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d307      	bcc.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	619a      	str	r2, [r3, #24]
 8002d62:	e002      	b.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 80c0 	bne.w	8002ef4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d126      	bne.n	8002dca <HAL_PCD_EP_DB_Transmit+0x482>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d90:	4413      	add	r3, r2
 8002d92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	011a      	lsls	r2, r3, #4
 8002d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002da2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	e01a      	b.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d116      	bne.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002de6:	4413      	add	r3, r2
 8002de8:	667b      	str	r3, [r7, #100]	; 0x64
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	011a      	lsls	r2, r3, #4
 8002df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002df2:	4413      	add	r3, r2
 8002df4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002df8:	663b      	str	r3, [r7, #96]	; 0x60
 8002dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	677b      	str	r3, [r7, #116]	; 0x74
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d12b      	bne.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e22:	4413      	add	r3, r2
 8002e24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	011a      	lsls	r2, r3, #4
 8002e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2e:	4413      	add	r3, r2
 8002e30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e62:	801a      	strh	r2, [r3, #0]
 8002e64:	e017      	b.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d113      	bne.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7c:	4413      	add	r3, r2
 8002e7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	011a      	lsls	r2, r3, #4
 8002e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e88:	4413      	add	r3, r2
 8002e8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e92:	2200      	movs	r2, #0
 8002e94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f005 f9ec 	bl	800827a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 811a 	bne.w	80030e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	8013      	strh	r3, [r2, #0]
 8002ef2:	e0f6      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d121      	bne.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	f040 80ca 	bne.w	80030e2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f56:	441a      	add	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f64:	441a      	add	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d30b      	bcc.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6a1a      	ldr	r2, [r3, #32]
 8002f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	621a      	str	r2, [r3, #32]
 8002f8c:	e017      	b.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002f96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fa6:	e00a      	b.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	785b      	ldrb	r3, [r3, #1]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d165      	bne.n	8003098 <HAL_PCD_EP_DB_Transmit+0x750>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fe0:	4413      	add	r3, r2
 8002fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	011a      	lsls	r2, r3, #4
 8002fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fec:	4413      	add	r3, r2
 8002fee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003008:	2b3e      	cmp	r3, #62	; 0x3e
 800300a:	d91d      	bls.n	8003048 <HAL_PCD_EP_DB_Transmit+0x700>
 800300c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	66bb      	str	r3, [r7, #104]	; 0x68
 8003014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003022:	3b01      	subs	r3, #1
 8003024:	66bb      	str	r3, [r7, #104]	; 0x68
 8003026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29a      	uxth	r2, r3
 800302c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800302e:	b29b      	uxth	r3, r3
 8003030:	029b      	lsls	r3, r3, #10
 8003032:	b29b      	uxth	r3, r3
 8003034:	4313      	orrs	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003040:	b29a      	uxth	r2, r3
 8003042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003044:	801a      	strh	r2, [r3, #0]
 8003046:	e041      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x784>
 8003048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800305a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800305e:	b29a      	uxth	r2, r3
 8003060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003062:	801a      	strh	r2, [r3, #0]
 8003064:	e032      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x784>
 8003066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	66bb      	str	r3, [r7, #104]	; 0x68
 800306e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_PCD_EP_DB_Transmit+0x738>
 800307a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307c:	3301      	adds	r3, #1
 800307e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29a      	uxth	r2, r3
 8003086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003088:	b29b      	uxth	r3, r3
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	b29b      	uxth	r3, r3
 800308e:	4313      	orrs	r3, r2
 8003090:	b29a      	uxth	r2, r3
 8003092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	e019      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x784>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d115      	bne.n	80030cc <HAL_PCD_EP_DB_Transmit+0x784>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ae:	4413      	add	r3, r2
 80030b0:	657b      	str	r3, [r7, #84]	; 0x54
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	011a      	lsls	r2, r3, #4
 80030b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ba:	4413      	add	r3, r2
 80030bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030c0:	653b      	str	r3, [r7, #80]	; 0x50
 80030c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6959      	ldr	r1, [r3, #20]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	895a      	ldrh	r2, [r3, #10]
 80030d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f003 fa9e 	bl	800661e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fc:	82bb      	strh	r3, [r7, #20]
 80030fe:	8abb      	ldrh	r3, [r7, #20]
 8003100:	f083 0310 	eor.w	r3, r3, #16
 8003104:	82bb      	strh	r3, [r7, #20]
 8003106:	8abb      	ldrh	r3, [r7, #20]
 8003108:	f083 0320 	eor.w	r3, r3, #32
 800310c:	82bb      	strh	r3, [r7, #20]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	8abb      	ldrh	r3, [r7, #20]
 800311e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312e:	b29b      	uxth	r3, r3
 8003130:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3790      	adds	r7, #144	; 0x90
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	817b      	strh	r3, [r7, #10]
 800314a:	4613      	mov	r3, r2
 800314c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e009      	b.n	8003186 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003172:	897a      	ldrh	r2, [r7, #10]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2200      	movs	r2, #0
 8003190:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	b29a      	uxth	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	80da      	strh	r2, [r3, #6]
 800319a:	e00b      	b.n	80031b4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2201      	movs	r2, #1
 80031a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e272      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8087 	beq.w	80032ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e0:	4b92      	ldr	r3, [pc, #584]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d00c      	beq.n	8003206 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031ec:	4b8f      	ldr	r3, [pc, #572]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d112      	bne.n	800321e <HAL_RCC_OscConfig+0x5e>
 80031f8:	4b8c      	ldr	r3, [pc, #560]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003204:	d10b      	bne.n	800321e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003206:	4b89      	ldr	r3, [pc, #548]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d06c      	beq.n	80032ec <HAL_RCC_OscConfig+0x12c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d168      	bne.n	80032ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e24c      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x76>
 8003228:	4b80      	ldr	r3, [pc, #512]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a7f      	ldr	r2, [pc, #508]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e02e      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x98>
 800323e:	4b7b      	ldr	r3, [pc, #492]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7a      	ldr	r2, [pc, #488]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b78      	ldr	r3, [pc, #480]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a77      	ldr	r2, [pc, #476]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0xbc>
 8003262:	4b72      	ldr	r3, [pc, #456]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a71      	ldr	r2, [pc, #452]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6e      	ldr	r2, [pc, #440]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xd4>
 800327c:	4b6b      	ldr	r3, [pc, #428]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6a      	ldr	r2, [pc, #424]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b68      	ldr	r3, [pc, #416]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a67      	ldr	r2, [pc, #412]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fd fbc8 	bl	8000a30 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fd fbc4 	bl	8000a30 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e200      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b5d      	ldr	r3, [pc, #372]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xe4>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd fbb4 	bl	8000a30 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fd fbb0 	bl	8000a30 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1ec      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x10c>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d063      	beq.n	80033c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fa:	4b4c      	ldr	r3, [pc, #304]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003306:	4b49      	ldr	r3, [pc, #292]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b08      	cmp	r3, #8
 8003310:	d11c      	bne.n	800334c <HAL_RCC_OscConfig+0x18c>
 8003312:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d116      	bne.n	800334c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331e:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d001      	beq.n	8003336 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e1c0      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4939      	ldr	r1, [pc, #228]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	e03a      	b.n	80033c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003354:	4b36      	ldr	r3, [pc, #216]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fd fb69 	bl	8000a30 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003362:	f7fd fb65 	bl	8000a30 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e1a1      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003374:	4b2d      	ldr	r3, [pc, #180]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b2a      	ldr	r3, [pc, #168]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4927      	ldr	r1, [pc, #156]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003396:	4b26      	ldr	r3, [pc, #152]	; (8003430 <HAL_RCC_OscConfig+0x270>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fd fb48 	bl	8000a30 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7fd fb44 	bl	8000a30 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e180      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03a      	beq.n	8003444 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fd fb28 	bl	8000a30 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fd fb24 	bl	8000a30 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e160      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003402:	2001      	movs	r0, #1
 8003404:	f000 face 	bl	80039a4 <RCC_Delay>
 8003408:	e01c      	b.n	8003444 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_RCC_OscConfig+0x274>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7fd fb0e 	bl	8000a30 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003416:	e00f      	b.n	8003438 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7fd fb0a 	bl	8000a30 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d908      	bls.n	8003438 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e146      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	42420000 	.word	0x42420000
 8003434:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	4b92      	ldr	r3, [pc, #584]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e9      	bne.n	8003418 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a6 	beq.w	800359e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b8b      	ldr	r3, [pc, #556]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b88      	ldr	r3, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a87      	ldr	r2, [pc, #540]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]
 800346e:	4b85      	ldr	r3, [pc, #532]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	4b82      	ldr	r3, [pc, #520]	; (8003688 <HAL_RCC_OscConfig+0x4c8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348a:	4b7f      	ldr	r3, [pc, #508]	; (8003688 <HAL_RCC_OscConfig+0x4c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7e      	ldr	r2, [pc, #504]	; (8003688 <HAL_RCC_OscConfig+0x4c8>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003496:	f7fd facb 	bl	8000a30 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349e:	f7fd fac7 	bl	8000a30 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b64      	cmp	r3, #100	; 0x64
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e103      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	4b75      	ldr	r3, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x4c8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x312>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a6e      	ldr	r2, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	e02d      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x334>
 80034da:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a69      	ldr	r2, [pc, #420]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6213      	str	r3, [r2, #32]
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a66      	ldr	r2, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	e01c      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x356>
 80034fc:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a60      	ldr	r2, [pc, #384]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6213      	str	r3, [r2, #32]
 8003508:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0x36e>
 8003516:	4b5b      	ldr	r3, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a5a      	ldr	r2, [pc, #360]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	4b58      	ldr	r3, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a57      	ldr	r2, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fd fa7b 	bl	8000a30 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd fa77 	bl	8000a30 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0b1      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b4b      	ldr	r3, [pc, #300]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCC_OscConfig+0x37e>
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fd fa65 	bl	8000a30 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fd fa61 	bl	8000a30 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e09b      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4a3b      	ldr	r2, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8087 	beq.w	80036b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d061      	beq.n	8003678 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d146      	bne.n	800364a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x4cc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fd fa35 	bl	8000a30 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd fa31 	bl	8000a30 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e06d      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4921      	ldr	r1, [pc, #132]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003604:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a19      	ldr	r1, [r3, #32]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	430b      	orrs	r3, r1
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x4cc>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fd fa05 	bl	8000a30 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7fd fa01 	bl	8000a30 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e03d      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x46a>
 8003648:	e035      	b.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RCC_OscConfig+0x4cc>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fd f9ee 	bl	8000a30 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fd f9ea 	bl	8000a30 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e026      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x498>
 8003676:	e01e      	b.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e019      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
 800368c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x500>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000

080036c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0d0      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d910      	bls.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b67      	ldr	r3, [pc, #412]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4965      	ldr	r1, [pc, #404]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b63      	ldr	r3, [pc, #396]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0b8      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003720:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a58      	ldr	r2, [pc, #352]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800372a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003738:	4b53      	ldr	r3, [pc, #332]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a52      	ldr	r2, [pc, #328]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b50      	ldr	r3, [pc, #320]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	494d      	ldr	r1, [pc, #308]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d040      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d115      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e07f      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e073      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06b      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b39      	ldr	r3, [pc, #228]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4936      	ldr	r1, [pc, #216]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b4:	f7fd f93c 	bl	8000a30 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fd f938 	bl	8000a30 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e053      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d210      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b24      	ldr	r3, [pc, #144]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 0207 	bic.w	r2, r3, #7
 80037fa:	4922      	ldr	r1, [pc, #136]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e032      	b.n	800387a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4916      	ldr	r1, [pc, #88]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	490e      	ldr	r1, [pc, #56]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	4313      	orrs	r3, r2
 8003850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003852:	f000 f821 	bl	8003898 <HAL_RCC_GetSysClockFreq>
 8003856:	4602      	mov	r2, r0
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	490a      	ldr	r1, [pc, #40]	; (800388c <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	5ccb      	ldrb	r3, [r1, r3]
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	4a09      	ldr	r2, [pc, #36]	; (8003890 <HAL_RCC_ClockConfig+0x1cc>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd f89a 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40022000 	.word	0x40022000
 8003888:	40021000 	.word	0x40021000
 800388c:	08009170 	.word	0x08009170
 8003890:	20000000 	.word	0x20000000
 8003894:	20000004 	.word	0x20000004

08003898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	; (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d002      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x30>
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d003      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0x36>
 80038c6:	e027      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ca:	613b      	str	r3, [r7, #16]
      break;
 80038cc:	e027      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	0c9b      	lsrs	r3, r3, #18
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038d8:	5cd3      	ldrb	r3, [r2, r3]
 80038da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d010      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_RCC_GetSysClockFreq+0x94>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0c5b      	lsrs	r3, r3, #17
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fa:	fb03 f202 	mul.w	r2, r3, r2
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e004      	b.n	8003912 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a0c      	ldr	r2, [pc, #48]	; (800393c <HAL_RCC_GetSysClockFreq+0xa4>)
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	613b      	str	r3, [r7, #16]
      break;
 8003916:	e002      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391e:	693b      	ldr	r3, [r7, #16]
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	08009188 	.word	0x08009188
 8003938:	08009198 	.word	0x08009198
 800393c:	003d0900 	.word	0x003d0900

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <HAL_RCC_GetHCLKFreq+0x10>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	20000000 	.word	0x20000000

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff2 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	08009180 	.word	0x08009180

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff ffde 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	08009180 	.word	0x08009180

080039a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <RCC_Delay+0x34>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <RCC_Delay+0x38>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c0:	bf00      	nop
  }
  while (Delay --);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f9      	bne.n	80039c0 <RCC_Delay+0x1c>
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000000 	.word	0x20000000
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d07d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a00:	4b4f      	ldr	r3, [pc, #316]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	61d3      	str	r3, [r2, #28]
 8003a18:	4b49      	ldr	r3, [pc, #292]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a24:	2301      	movs	r3, #1
 8003a26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b46      	ldr	r3, [pc, #280]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d118      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a40:	f7fc fff6 	bl	8000a30 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fc fff2 	bl	8000a30 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e06d      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b3a      	ldr	r3, [pc, #232]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d027      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a84:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a9a:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fc ffc1 	bl	8000a30 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fc ffbd 	bl	8000a30 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e036      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4917      	ldr	r1, [pc, #92]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	490b      	ldr	r1, [pc, #44]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4904      	ldr	r1, [pc, #16]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	42420440 	.word	0x42420440

08003b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e042      	b.n	8003be4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fc fe24 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9af 	bl	8003ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d16d      	bne.n	8003ce8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_UART_Transmit+0x2c>
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e066      	b.n	8003cea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2221      	movs	r2, #33	; 0x21
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c2a:	f7fc ff01 	bl	8000a30 <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	88fa      	ldrh	r2, [r7, #6]
 8003c3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c44:	d108      	bne.n	8003c58 <HAL_UART_Transmit+0x6c>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d104      	bne.n	8003c58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e003      	b.n	8003c60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c60:	e02a      	b.n	8003cb8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8d2 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e036      	b.n	8003cea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10b      	bne.n	8003c9a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3302      	adds	r3, #2
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	e007      	b.n	8003caa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1cf      	bne.n	8003c62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2140      	movs	r1, #64	; 0x40
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f8a2 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e006      	b.n	8003cea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b08a      	sub	sp, #40	; 0x28
 8003cf6:	af02      	add	r7, sp, #8
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d17c      	bne.n	8003e0c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_UART_Receive+0x2c>
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e075      	b.n	8003e0e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2222      	movs	r2, #34	; 0x22
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d36:	f7fc fe7b 	bl	8000a30 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d108      	bne.n	8003d64 <HAL_UART_Receive+0x72>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e003      	b.n	8003d6c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d6c:	e043      	b.n	8003df6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2120      	movs	r1, #32
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f84c 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e042      	b.n	8003e0e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	3302      	adds	r3, #2
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	e01f      	b.n	8003de8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db0:	d007      	beq.n	8003dc2 <HAL_UART_Receive+0xd0>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10a      	bne.n	8003dd0 <HAL_UART_Receive+0xde>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e008      	b.n	8003de2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1b6      	bne.n	8003d6e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b090      	sub	sp, #64	; 0x40
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e26:	e050      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d04c      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e36:	f7fc fdfb 	bl	8000a30 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d241      	bcs.n	8003eca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e66:	637a      	str	r2, [r7, #52]	; 0x34
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3314      	adds	r3, #20
 8003e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e9a:	623a      	str	r2, [r7, #32]
 8003e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	69f9      	ldr	r1, [r7, #28]
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e5      	bne.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e00f      	b.n	8003eea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d09f      	beq.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3740      	adds	r7, #64	; 0x40
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f2e:	f023 030c 	bic.w	r3, r3, #12
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a2c      	ldr	r2, [pc, #176]	; (8004008 <UART_SetConfig+0x114>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7ff fd0e 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	e002      	b.n	8003f6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f64:	f7ff fcf6 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8003f68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4a22      	ldr	r2, [pc, #136]	; (800400c <UART_SetConfig+0x118>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	0119      	lsls	r1, r3, #4
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009a      	lsls	r2, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	; (800400c <UART_SetConfig+0x118>)
 8003fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2064      	movs	r0, #100	; 0x64
 8003faa:	fb00 f303 	mul.w	r3, r0, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	3332      	adds	r3, #50	; 0x32
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <UART_SetConfig+0x118>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	4419      	add	r1, r3
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009a      	lsls	r2, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <UART_SetConfig+0x118>)
 8003fda:	fba3 0302 	umull	r0, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2064      	movs	r0, #100	; 0x64
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a07      	ldr	r2, [pc, #28]	; (800400c <UART_SetConfig+0x118>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40013800 	.word	0x40013800
 800400c:	51eb851f 	.word	0x51eb851f

08004010 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004010:	b084      	sub	sp, #16
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	f107 0014 	add.w	r0, r7, #20
 800401e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	b004      	add	sp, #16
 800402e:	4770      	bx	lr

08004030 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004040:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004044:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004064:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004068:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	b29b      	uxth	r3, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	b29b      	uxth	r3, r3
 800407a:	4013      	ands	r3, r2
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040a8:	b084      	sub	sp, #16
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	f107 0014 	add.w	r0, r7, #20
 80040b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	b004      	add	sp, #16
 80040e6:	4770      	bx	lr

080040e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b09d      	sub	sp, #116	; 0x74
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	78db      	ldrb	r3, [r3, #3]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d81f      	bhi.n	800415a <USB_ActivateEndpoint+0x72>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <USB_ActivateEndpoint+0x38>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004163 	.word	0x08004163
 800412c:	0800413f 	.word	0x0800413f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004130:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004138:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800413c:	e012      	b.n	8004164 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800413e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004142:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004146:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800414a:	e00b      	b.n	8004164 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800414c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004154:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004158:	e004      	b.n	8004164 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004160:	e000      	b.n	8004164 <USB_ActivateEndpoint+0x7c>
      break;
 8004162:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	441a      	add	r2, r3
 800416e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800417a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004182:	b29b      	uxth	r3, r3
 8004184:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	b29a      	uxth	r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80041b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	7b1b      	ldrb	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 8178 	bne.w	80044c6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	785b      	ldrb	r3, [r3, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8084 	beq.w	80042e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	4413      	add	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	011a      	lsls	r2, r3, #4
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	88db      	ldrh	r3, [r3, #6]
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	827b      	strh	r3, [r7, #18]
 8004222:	8a7b      	ldrh	r3, [r7, #18]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01b      	beq.n	8004264 <USB_ActivateEndpoint+0x17c>
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	823b      	strh	r3, [r7, #16]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	8a3b      	ldrh	r3, [r7, #16]
 8004250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004260:	b29b      	uxth	r3, r3
 8004262:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	78db      	ldrb	r3, [r3, #3]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d020      	beq.n	80042ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	81bb      	strh	r3, [r7, #12]
 8004284:	89bb      	ldrh	r3, [r7, #12]
 8004286:	f083 0320 	eor.w	r3, r3, #32
 800428a:	81bb      	strh	r3, [r7, #12]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	89bb      	ldrh	r3, [r7, #12]
 8004298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]
 80042ac:	e2d5      	b.n	800485a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c4:	81fb      	strh	r3, [r7, #14]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	89fb      	ldrh	r3, [r7, #14]
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]
 80042e6:	e2b8      	b.n	800485a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	4413      	add	r3, r2
 80042fa:	633b      	str	r3, [r7, #48]	; 0x30
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	011a      	lsls	r2, r3, #4
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	4413      	add	r3, r2
 8004306:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	88db      	ldrh	r3, [r3, #6]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	4413      	add	r3, r2
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	011a      	lsls	r2, r3, #4
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	4413      	add	r3, r2
 800433a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434a:	b29a      	uxth	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b3e      	cmp	r3, #62	; 0x3e
 8004356:	d91d      	bls.n	8004394 <USB_ActivateEndpoint+0x2ac>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <USB_ActivateEndpoint+0x28a>
 800436c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800436e:	3b01      	subs	r3, #1
 8004370:	66bb      	str	r3, [r7, #104]	; 0x68
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29a      	uxth	r2, r3
 8004378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800437a:	b29b      	uxth	r3, r3
 800437c:	029b      	lsls	r3, r3, #10
 800437e:	b29b      	uxth	r3, r3
 8004380:	4313      	orrs	r3, r2
 8004382:	b29b      	uxth	r3, r3
 8004384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438c:	b29a      	uxth	r2, r3
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	e026      	b.n	80043e2 <USB_ActivateEndpoint+0x2fa>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <USB_ActivateEndpoint+0x2ca>
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e017      	b.n	80043e2 <USB_ActivateEndpoint+0x2fa>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <USB_ActivateEndpoint+0x2e4>
 80043c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043c8:	3301      	adds	r3, #1
 80043ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	029b      	lsls	r3, r3, #10
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4313      	orrs	r3, r2
 80043dc:	b29a      	uxth	r2, r3
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80043f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01b      	beq.n	8004432 <USB_ActivateEndpoint+0x34a>
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004410:	843b      	strh	r3, [r7, #32]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	441a      	add	r2, r3
 800441c:	8c3b      	ldrh	r3, [r7, #32]
 800441e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d124      	bne.n	8004484 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800444c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004450:	83bb      	strh	r3, [r7, #28]
 8004452:	8bbb      	ldrh	r3, [r7, #28]
 8004454:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004458:	83bb      	strh	r3, [r7, #28]
 800445a:	8bbb      	ldrh	r3, [r7, #28]
 800445c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004460:	83bb      	strh	r3, [r7, #28]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8bbb      	ldrh	r3, [r7, #28]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
 8004482:	e1ea      	b.n	800485a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	83fb      	strh	r3, [r7, #30]
 800449c:	8bfb      	ldrh	r3, [r7, #30]
 800449e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044a2:	83fb      	strh	r3, [r7, #30]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	441a      	add	r2, r3
 80044ae:	8bfb      	ldrh	r3, [r7, #30]
 80044b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8013      	strh	r3, [r2, #0]
 80044c4:	e1c9      	b.n	800485a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	78db      	ldrb	r3, [r3, #3]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d11e      	bne.n	800450c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]
 800450a:	e01d      	b.n	8004548 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004544:	b29b      	uxth	r3, r3
 8004546:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004558:	4413      	add	r3, r2
 800455a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	011a      	lsls	r2, r3, #4
 8004562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004564:	4413      	add	r3, r2
 8004566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456a:	65bb      	str	r3, [r7, #88]	; 0x58
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	891b      	ldrh	r3, [r3, #8]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457a:	801a      	strh	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	657b      	str	r3, [r7, #84]	; 0x54
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458c:	4413      	add	r3, r2
 800458e:	657b      	str	r3, [r7, #84]	; 0x54
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	011a      	lsls	r2, r3, #4
 8004596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004598:	4413      	add	r3, r2
 800459a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	895b      	ldrh	r3, [r3, #10]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f040 8093 	bne.w	80046e0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80045ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80045ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01b      	beq.n	800460e <USB_ActivateEndpoint+0x526>
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800461c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01b      	beq.n	800465e <USB_ActivateEndpoint+0x576>
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800464a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004656:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004674:	873b      	strh	r3, [r7, #56]	; 0x38
 8004676:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004678:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800467c:	873b      	strh	r3, [r7, #56]	; 0x38
 800467e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004680:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004684:	873b      	strh	r3, [r7, #56]	; 0x38
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]
 80046de:	e0bc      	b.n	800485a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80046f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01d      	beq.n	8004738 <USB_ActivateEndpoint+0x650>
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004748:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01d      	beq.n	8004790 <USB_ActivateEndpoint+0x6a8>
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	78db      	ldrb	r3, [r3, #3]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d024      	beq.n	80047e2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047b6:	f083 0320 	eor.w	r3, r3, #32
 80047ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]
 80047e0:	e01d      	b.n	800481e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800485a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800485e:	4618      	mov	r0, r3
 8004860:	3774      	adds	r7, #116	; 0x74
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004868:	b480      	push	{r7}
 800486a:	b08d      	sub	sp, #52	; 0x34
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 808e 	bne.w	8004998 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d044      	beq.n	800490e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	81bb      	strh	r3, [r7, #12]
 8004892:	89bb      	ldrh	r3, [r7, #12]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <USB_DeactivateEndpoint+0x6c>
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	817b      	strh	r3, [r7, #10]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ea:	813b      	strh	r3, [r7, #8]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	441a      	add	r2, r3
 80048f6:	893b      	ldrh	r3, [r7, #8]
 80048f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	b29b      	uxth	r3, r3
 800490a:	8013      	strh	r3, [r2, #0]
 800490c:	e192      	b.n	8004c34 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	827b      	strh	r3, [r7, #18]
 800491c:	8a7b      	ldrh	r3, [r7, #18]
 800491e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01b      	beq.n	800495e <USB_DeactivateEndpoint+0xf6>
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493c:	823b      	strh	r3, [r7, #16]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	8a3b      	ldrh	r3, [r7, #16]
 800494a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800494e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495a:	b29b      	uxth	r3, r3
 800495c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004974:	81fb      	strh	r3, [r7, #14]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	441a      	add	r2, r3
 8004980:	89fb      	ldrh	r3, [r7, #14]
 8004982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004992:	b29b      	uxth	r3, r3
 8004994:	8013      	strh	r3, [r2, #0]
 8004996:	e14d      	b.n	8004c34 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 80a5 	bne.w	8004aec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	843b      	strh	r3, [r7, #32]
 80049b0:	8c3b      	ldrh	r3, [r7, #32]
 80049b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01b      	beq.n	80049f2 <USB_DeactivateEndpoint+0x18a>
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	83fb      	strh	r3, [r7, #30]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	8bfb      	ldrh	r3, [r7, #30]
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	83bb      	strh	r3, [r7, #28]
 8004a00:	8bbb      	ldrh	r3, [r7, #28]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01b      	beq.n	8004a42 <USB_DeactivateEndpoint+0x1da>
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	837b      	strh	r3, [r7, #26]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8b7b      	ldrh	r3, [r7, #26]
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a58:	833b      	strh	r3, [r7, #24]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	441a      	add	r2, r3
 8004a64:	8b3b      	ldrh	r3, [r7, #24]
 8004a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	82fb      	strh	r3, [r7, #22]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	8afb      	ldrh	r3, [r7, #22]
 8004a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac8:	82bb      	strh	r3, [r7, #20]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	441a      	add	r2, r3
 8004ad4:	8abb      	ldrh	r3, [r7, #20]
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]
 8004aea:	e0a3      	b.n	8004c34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004afa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <USB_DeactivateEndpoint+0x2d4>
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <USB_DeactivateEndpoint+0x324>
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3734      	adds	r7, #52	; 0x34
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b0c2      	sub	sp, #264	; 0x108
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c4e:	6018      	str	r0, [r3, #0]
 8004c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c58:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	f040 86b7 	bne.w	80059da <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d908      	bls.n	8004c9a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c98:	e007      	b.n	8004caa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	7b1b      	ldrb	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d13a      	bne.n	8004d30 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6959      	ldr	r1, [r3, #20]
 8004cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	88da      	ldrh	r2, [r3, #6]
 8004cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cdc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ce0:	6800      	ldr	r0, [r0, #0]
 8004ce2:	f001 fc9c 	bl	800661e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	011a      	lsls	r2, r3, #4
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	f000 be1f 	b.w	800596e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	78db      	ldrb	r3, [r3, #3]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f040 8462 	bne.w	8005606 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	f240 83df 	bls.w	800551e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 81c7 	beq.w	8005190 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	785b      	ldrb	r3, [r3, #1]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d177      	bne.n	8004f0e <USB_EPStartXfer+0x2ce>
 8004e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	4413      	add	r3, r2
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	011a      	lsls	r2, r3, #4
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	4413      	add	r3, r2
 8004e54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e70:	d921      	bls.n	8004eb6 <USB_EPStartXfer+0x276>
 8004e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <USB_EPStartXfer+0x252>
 8004e88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	029b      	lsls	r3, r3, #10
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	e050      	b.n	8004f58 <USB_EPStartXfer+0x318>
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <USB_EPStartXfer+0x294>
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	e041      	b.n	8004f58 <USB_EPStartXfer+0x318>
 8004ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <USB_EPStartXfer+0x2b4>
 8004eea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	029b      	lsls	r3, r3, #10
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e024      	b.n	8004f58 <USB_EPStartXfer+0x318>
 8004f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d11c      	bne.n	8004f58 <USB_EPStartXfer+0x318>
 8004f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	4413      	add	r3, r2
 8004f34:	633b      	str	r3, [r7, #48]	; 0x30
 8004f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	011a      	lsls	r2, r3, #4
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	4413      	add	r3, r2
 8004f48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	895b      	ldrh	r3, [r3, #10]
 8004f64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6959      	ldr	r1, [r3, #20]
 8004f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f82:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f86:	6800      	ldr	r0, [r0, #0]
 8004f88:	f001 fb49 	bl	800661e <USB_WritePMA>
            ep->xfer_buff += len;
 8004f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9c:	441a      	add	r2, r3
 8004f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d90f      	bls.n	8004fe6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	621a      	str	r2, [r3, #32]
 8004fe4:	e00e      	b.n	8005004 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d177      	bne.n	8005104 <USB_EPStartXfer+0x4c4>
 8005014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	4413      	add	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	4413      	add	r3, r2
 800504a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505a:	b29a      	uxth	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005064:	2b3e      	cmp	r3, #62	; 0x3e
 8005066:	d921      	bls.n	80050ac <USB_EPStartXfer+0x46c>
 8005068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <USB_EPStartXfer+0x448>
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005082:	3b01      	subs	r3, #1
 8005084:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29a      	uxth	r2, r3
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005092:	b29b      	uxth	r3, r3
 8005094:	029b      	lsls	r3, r3, #10
 8005096:	b29b      	uxth	r3, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	b29b      	uxth	r3, r3
 800509c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e056      	b.n	800515a <USB_EPStartXfer+0x51a>
 80050ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <USB_EPStartXfer+0x48a>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	e047      	b.n	800515a <USB_EPStartXfer+0x51a>
 80050ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <USB_EPStartXfer+0x4aa>
 80050e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050e4:	3301      	adds	r3, #1
 80050e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	e02a      	b.n	800515a <USB_EPStartXfer+0x51a>
 8005104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d122      	bne.n	800515a <USB_EPStartXfer+0x51a>
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512e:	b29b      	uxth	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	4413      	add	r3, r2
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	4413      	add	r3, r2
 800514a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005154:	b29a      	uxth	r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800515a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	891b      	ldrh	r3, [r3, #8]
 8005166:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800516a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6959      	ldr	r1, [r3, #20]
 8005176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800517a:	b29b      	uxth	r3, r3
 800517c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005180:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005184:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005188:	6800      	ldr	r0, [r0, #0]
 800518a:	f001 fa48 	bl	800661e <USB_WritePMA>
 800518e:	e3ee      	b.n	800596e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d177      	bne.n	8005290 <USB_EPStartXfer+0x650>
 80051a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c0:	4413      	add	r3, r2
 80051c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	011a      	lsls	r2, r3, #4
 80051d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051da:	647b      	str	r3, [r7, #68]	; 0x44
 80051dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f0:	2b3e      	cmp	r3, #62	; 0x3e
 80051f2:	d921      	bls.n	8005238 <USB_EPStartXfer+0x5f8>
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <USB_EPStartXfer+0x5d4>
 800520a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800520e:	3b01      	subs	r3, #1
 8005210:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29a      	uxth	r2, r3
 800521a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800521e:	b29b      	uxth	r3, r3
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	b29b      	uxth	r3, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005230:	b29a      	uxth	r2, r3
 8005232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e056      	b.n	80052e6 <USB_EPStartXfer+0x6a6>
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <USB_EPStartXfer+0x616>
 8005240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524e:	b29a      	uxth	r2, r3
 8005250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	e047      	b.n	80052e6 <USB_EPStartXfer+0x6a6>
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <USB_EPStartXfer+0x636>
 800526c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005270:	3301      	adds	r3, #1
 8005272:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29a      	uxth	r2, r3
 800527c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005280:	b29b      	uxth	r3, r3
 8005282:	029b      	lsls	r3, r3, #10
 8005284:	b29b      	uxth	r3, r3
 8005286:	4313      	orrs	r3, r2
 8005288:	b29a      	uxth	r2, r3
 800528a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	e02a      	b.n	80052e6 <USB_EPStartXfer+0x6a6>
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d122      	bne.n	80052e6 <USB_EPStartXfer+0x6a6>
 80052a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	653b      	str	r3, [r7, #80]	; 0x50
 80052ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c0:	4413      	add	r3, r2
 80052c2:	653b      	str	r3, [r7, #80]	; 0x50
 80052c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	011a      	lsls	r2, r3, #4
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	4413      	add	r3, r2
 80052d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	891b      	ldrh	r3, [r3, #8]
 80052f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6959      	ldr	r1, [r3, #20]
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005306:	b29b      	uxth	r3, r3
 8005308:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800530c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005310:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005314:	6800      	ldr	r0, [r0, #0]
 8005316:	f001 f982 	bl	800661e <USB_WritePMA>
            ep->xfer_buff += len;
 800531a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532a:	441a      	add	r2, r3
 800532c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d90f      	bls.n	8005374 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	621a      	str	r2, [r3, #32]
 8005372:	e00e      	b.n	8005392 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2200      	movs	r2, #0
 8005390:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	643b      	str	r3, [r7, #64]	; 0x40
 800539e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d177      	bne.n	800549e <USB_EPStartXfer+0x85e>
 80053ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	4413      	add	r3, r2
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80053d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	011a      	lsls	r2, r3, #4
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	4413      	add	r3, r2
 80053e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053e8:	637b      	str	r3, [r7, #52]	; 0x34
 80053ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005400:	d921      	bls.n	8005446 <USB_EPStartXfer+0x806>
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800540c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <USB_EPStartXfer+0x7e2>
 8005418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541c:	3b01      	subs	r3, #1
 800541e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542c:	b29b      	uxth	r3, r3
 800542e:	029b      	lsls	r3, r3, #10
 8005430:	b29b      	uxth	r3, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	b29b      	uxth	r3, r3
 8005436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543e:	b29a      	uxth	r2, r3
 8005440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005442:	801a      	strh	r2, [r3, #0]
 8005444:	e050      	b.n	80054e8 <USB_EPStartXfer+0x8a8>
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <USB_EPStartXfer+0x824>
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545c:	b29a      	uxth	r2, r3
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e041      	b.n	80054e8 <USB_EPStartXfer+0x8a8>
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <USB_EPStartXfer+0x844>
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	3301      	adds	r3, #1
 8005480:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29b      	uxth	r3, r3
 8005494:	4313      	orrs	r3, r2
 8005496:	b29a      	uxth	r2, r3
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	e024      	b.n	80054e8 <USB_EPStartXfer+0x8a8>
 800549e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d11c      	bne.n	80054e8 <USB_EPStartXfer+0x8a8>
 80054ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	4413      	add	r3, r2
 80054c4:	643b      	str	r3, [r7, #64]	; 0x40
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	011a      	lsls	r2, r3, #4
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	4413      	add	r3, r2
 80054d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	895b      	ldrh	r3, [r3, #10]
 80054f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6959      	ldr	r1, [r3, #20]
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005508:	b29b      	uxth	r3, r3
 800550a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800550e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005512:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	f001 f881 	bl	800661e <USB_WritePMA>
 800551c:	e227      	b.n	800596e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800551e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800552e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	441a      	add	r2, r3
 8005572:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800558a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055aa:	4413      	add	r3, r2
 80055ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	011a      	lsls	r2, r3, #4
 80055bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055be:	4413      	add	r3, r2
 80055c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80055c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	891b      	ldrh	r3, [r3, #8]
 80055dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6959      	ldr	r1, [r3, #20]
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055fe:	6800      	ldr	r0, [r0, #0]
 8005600:	f001 f80d 	bl	800661e <USB_WritePMA>
 8005604:	e1b3      	b.n	800596e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005616:	1ad2      	subs	r2, r2, r3
 8005618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80c6 	beq.w	80057d8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800564c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	673b      	str	r3, [r7, #112]	; 0x70
 8005658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d177      	bne.n	8005758 <USB_EPStartXfer+0xb18>
 8005668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	66bb      	str	r3, [r7, #104]	; 0x68
 8005674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005682:	b29b      	uxth	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005688:	4413      	add	r3, r2
 800568a:	66bb      	str	r3, [r7, #104]	; 0x68
 800568c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	011a      	lsls	r2, r3, #4
 800569a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800569c:	4413      	add	r3, r2
 800569e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056a2:	667b      	str	r3, [r7, #100]	; 0x64
 80056a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ba:	d921      	bls.n	8005700 <USB_EPStartXfer+0xac0>
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <USB_EPStartXfer+0xa9c>
 80056d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	029b      	lsls	r3, r3, #10
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	e050      	b.n	80057a2 <USB_EPStartXfer+0xb62>
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <USB_EPStartXfer+0xade>
 8005708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005716:	b29a      	uxth	r2, r3
 8005718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e041      	b.n	80057a2 <USB_EPStartXfer+0xb62>
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <USB_EPStartXfer+0xafe>
 8005734:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005738:	3301      	adds	r3, #1
 800573a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800573e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29a      	uxth	r2, r3
 8005744:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005748:	b29b      	uxth	r3, r3
 800574a:	029b      	lsls	r3, r3, #10
 800574c:	b29b      	uxth	r3, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	b29a      	uxth	r2, r3
 8005752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005754:	801a      	strh	r2, [r3, #0]
 8005756:	e024      	b.n	80057a2 <USB_EPStartXfer+0xb62>
 8005758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d11c      	bne.n	80057a2 <USB_EPStartXfer+0xb62>
 8005768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005776:	b29b      	uxth	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800577c:	4413      	add	r3, r2
 800577e:	673b      	str	r3, [r7, #112]	; 0x70
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005790:	4413      	add	r3, r2
 8005792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005796:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	b29a      	uxth	r2, r3
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	895b      	ldrh	r3, [r3, #10]
 80057ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6959      	ldr	r1, [r3, #20]
 80057be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057d0:	6800      	ldr	r0, [r0, #0]
 80057d2:	f000 ff24 	bl	800661e <USB_WritePMA>
 80057d6:	e0ca      	b.n	800596e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d177      	bne.n	80058d8 <USB_EPStartXfer+0xc98>
 80057e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005802:	b29b      	uxth	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005808:	4413      	add	r3, r2
 800580a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	011a      	lsls	r2, r3, #4
 800581a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800581c:	4413      	add	r3, r2
 800581e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005822:	67bb      	str	r3, [r7, #120]	; 0x78
 8005824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582e:	b29a      	uxth	r2, r3
 8005830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005838:	2b3e      	cmp	r3, #62	; 0x3e
 800583a:	d921      	bls.n	8005880 <USB_EPStartXfer+0xc40>
 800583c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <USB_EPStartXfer+0xc1c>
 8005852:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005856:	3b01      	subs	r3, #1
 8005858:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800585c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29a      	uxth	r2, r3
 8005862:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005866:	b29b      	uxth	r3, r3
 8005868:	029b      	lsls	r3, r3, #10
 800586a:	b29b      	uxth	r3, r3
 800586c:	4313      	orrs	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005878:	b29a      	uxth	r2, r3
 800587a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	e05c      	b.n	800593a <USB_EPStartXfer+0xcfa>
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <USB_EPStartXfer+0xc5e>
 8005888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005896:	b29a      	uxth	r2, r3
 8005898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589a:	801a      	strh	r2, [r3, #0]
 800589c:	e04d      	b.n	800593a <USB_EPStartXfer+0xcfa>
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <USB_EPStartXfer+0xc7e>
 80058b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058b8:	3301      	adds	r3, #1
 80058ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	029b      	lsls	r3, r3, #10
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e030      	b.n	800593a <USB_EPStartXfer+0xcfa>
 80058d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d128      	bne.n	800593a <USB_EPStartXfer+0xcfa>
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005904:	b29b      	uxth	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800590c:	4413      	add	r3, r2
 800590e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	011a      	lsls	r2, r3, #4
 8005920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005924:	4413      	add	r3, r2
 8005926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800592a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005932:	b29a      	uxth	r2, r3
 8005934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005938:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	891b      	ldrh	r3, [r3, #8]
 8005946:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6959      	ldr	r1, [r3, #20]
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595a:	b29b      	uxth	r3, r3
 800595c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005960:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005964:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005968:	6800      	ldr	r0, [r0, #0]
 800596a:	f000 fe58 	bl	800661e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800596e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005994:	817b      	strh	r3, [r7, #10]
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	f083 0310 	eor.w	r3, r3, #16
 800599c:	817b      	strh	r3, [r7, #10]
 800599e:	897b      	ldrh	r3, [r7, #10]
 80059a0:	f083 0320 	eor.w	r3, r3, #32
 80059a4:	817b      	strh	r3, [r7, #10]
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	897b      	ldrh	r3, [r7, #10]
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]
 80059d6:	f000 bcde 	b.w	8006396 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	7b1b      	ldrb	r3, [r3, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f040 80bb 	bne.w	8005b62 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d917      	bls.n	8005a38 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	1ad2      	subs	r2, r2, r3
 8005a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	619a      	str	r2, [r3, #24]
 8005a36:	e00e      	b.n	8005a56 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab6:	d924      	bls.n	8005b02 <USB_EPStartXfer+0xec2>
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <USB_EPStartXfer+0xe98>
 8005ace:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	029b      	lsls	r3, r3, #10
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	f000 bc10 	b.w	8006322 <USB_EPStartXfer+0x16e2>
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10c      	bne.n	8005b24 <USB_EPStartXfer+0xee4>
 8005b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e3fe      	b.n	8006322 <USB_EPStartXfer+0x16e2>
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <USB_EPStartXfer+0xf04>
 8005b3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	029b      	lsls	r3, r3, #10
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	e3df      	b.n	8006322 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	78db      	ldrb	r3, [r3, #3]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	f040 8218 	bne.w	8005fa4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 809d 	bne.w	8005cc0 <USB_EPStartXfer+0x1080>
 8005b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005baa:	4413      	add	r3, r2
 8005bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	011a      	lsls	r2, r3, #4
 8005bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b3e      	cmp	r3, #62	; 0x3e
 8005bee:	d92b      	bls.n	8005c48 <USB_EPStartXfer+0x1008>
 8005bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <USB_EPStartXfer+0xfe0>
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	029b      	lsls	r3, r3, #10
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e070      	b.n	8005d2a <USB_EPStartXfer+0x10ea>
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10c      	bne.n	8005c72 <USB_EPStartXfer+0x1032>
 8005c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e05b      	b.n	8005d2a <USB_EPStartXfer+0x10ea>
 8005c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <USB_EPStartXfer+0x1062>
 8005c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	029b      	lsls	r3, r3, #10
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e034      	b.n	8005d2a <USB_EPStartXfer+0x10ea>
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d12c      	bne.n	8005d2a <USB_EPStartXfer+0x10ea>
 8005cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	011a      	lsls	r2, r3, #4
 8005d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f040 809d 	bne.w	8005e84 <USB_EPStartXfer+0x1244>
 8005d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d6e:	4413      	add	r3, r2
 8005d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d86:	4413      	add	r3, r2
 8005d88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005da2:	801a      	strh	r2, [r3, #0]
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b3e      	cmp	r3, #62	; 0x3e
 8005db2:	d92b      	bls.n	8005e0c <USB_EPStartXfer+0x11cc>
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <USB_EPStartXfer+0x11a4>
 8005dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	029b      	lsls	r3, r3, #10
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4313      	orrs	r3, r2
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	e069      	b.n	8005ee0 <USB_EPStartXfer+0x12a0>
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10c      	bne.n	8005e36 <USB_EPStartXfer+0x11f6>
 8005e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	e054      	b.n	8005ee0 <USB_EPStartXfer+0x12a0>
 8005e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <USB_EPStartXfer+0x1226>
 8005e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e60:	3301      	adds	r3, #1
 8005e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	029b      	lsls	r3, r3, #10
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e02d      	b.n	8005ee0 <USB_EPStartXfer+0x12a0>
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d125      	bne.n	8005ee0 <USB_EPStartXfer+0x12a0>
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eaa:	4413      	add	r3, r2
 8005eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	011a      	lsls	r2, r3, #4
 8005ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ede:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8218 	beq.w	8006322 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <USB_EPStartXfer+0x12ea>
 8005f1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10d      	bne.n	8005f46 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 81f5 	bne.w	8006322 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f38:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f040 81ee 	bne.w	8006322 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	8013      	strh	r3, [r2, #0]
 8005fa2:	e1be      	b.n	8006322 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	78db      	ldrb	r3, [r3, #3]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	f040 81b4 	bne.w	800631e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d917      	bls.n	8006002 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	619a      	str	r2, [r3, #24]
 8006000:	e00e      	b.n	8006020 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2200      	movs	r2, #0
 800601e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 8085 	bne.w	800613c <USB_EPStartXfer+0x14fc>
 8006032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604e:	b29b      	uxth	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006056:	4413      	add	r3, r2
 8006058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	011a      	lsls	r2, r3, #4
 800606a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800606e:	4413      	add	r3, r2
 8006070:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006084:	b29a      	uxth	r2, r3
 8006086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006090:	2b3e      	cmp	r3, #62	; 0x3e
 8006092:	d923      	bls.n	80060dc <USB_EPStartXfer+0x149c>
 8006094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800609e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <USB_EPStartXfer+0x1474>
 80060aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ae:	3b01      	subs	r3, #1
 80060b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	029b      	lsls	r3, r3, #10
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	e060      	b.n	800619e <USB_EPStartXfer+0x155e>
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10c      	bne.n	80060fe <USB_EPStartXfer+0x14be>
 80060e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e04f      	b.n	800619e <USB_EPStartXfer+0x155e>
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <USB_EPStartXfer+0x14de>
 8006114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006118:	3301      	adds	r3, #1
 800611a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800611e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29a      	uxth	r2, r3
 8006126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612a:	b29b      	uxth	r3, r3
 800612c:	029b      	lsls	r3, r3, #10
 800612e:	b29b      	uxth	r3, r3
 8006130:	4313      	orrs	r3, r2
 8006132:	b29a      	uxth	r2, r3
 8006134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e030      	b.n	800619e <USB_EPStartXfer+0x155e>
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d128      	bne.n	800619e <USB_EPStartXfer+0x155e>
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800615a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006168:	b29b      	uxth	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006170:	4413      	add	r3, r2
 8006172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	011a      	lsls	r2, r3, #4
 8006184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006188:	4413      	add	r3, r2
 800618a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800618e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006196:	b29a      	uxth	r2, r3
 8006198:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	785b      	ldrb	r3, [r3, #1]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 8085 	bne.w	80062c8 <USB_EPStartXfer+0x1688>
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061e2:	4413      	add	r3, r2
 80061e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	011a      	lsls	r2, r3, #4
 80061f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061fa:	4413      	add	r3, r2
 80061fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	2b3e      	cmp	r3, #62	; 0x3e
 800621e:	d923      	bls.n	8006268 <USB_EPStartXfer+0x1628>
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <USB_EPStartXfer+0x1600>
 8006236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800623a:	3b01      	subs	r3, #1
 800623c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29a      	uxth	r2, r3
 8006248:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800624c:	b29b      	uxth	r3, r3
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	b29b      	uxth	r3, r3
 8006252:	4313      	orrs	r3, r2
 8006254:	b29b      	uxth	r3, r3
 8006256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625e:	b29a      	uxth	r2, r3
 8006260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	e05c      	b.n	8006322 <USB_EPStartXfer+0x16e2>
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10c      	bne.n	800628a <USB_EPStartXfer+0x164a>
 8006270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006280:	b29a      	uxth	r2, r3
 8006282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e04b      	b.n	8006322 <USB_EPStartXfer+0x16e2>
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <USB_EPStartXfer+0x166a>
 80062a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062a4:	3301      	adds	r3, #1
 80062a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	4313      	orrs	r3, r2
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	e02c      	b.n	8006322 <USB_EPStartXfer+0x16e2>
 80062c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d124      	bne.n	8006322 <USB_EPStartXfer+0x16e2>
 80062d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062ee:	4413      	add	r3, r2
 80062f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	011a      	lsls	r2, r3, #4
 8006302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006306:	4413      	add	r3, r2
 8006308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800630c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	e001      	b.n	8006322 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e03a      	b.n	8006398 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006348:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800634c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006350:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006354:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006358:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800635c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006360:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d020      	beq.n	80063f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ca:	81bb      	strh	r3, [r7, #12]
 80063cc:	89bb      	ldrh	r3, [r7, #12]
 80063ce:	f083 0310 	eor.w	r3, r3, #16
 80063d2:	81bb      	strh	r3, [r7, #12]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	89bb      	ldrh	r3, [r7, #12]
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]
 80063f4:	e01f      	b.n	8006436 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640c:	81fb      	strh	r3, [r7, #14]
 800640e:	89fb      	ldrh	r3, [r7, #14]
 8006410:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006414:	81fb      	strh	r3, [r7, #14]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	441a      	add	r2, r3
 8006420:	89fb      	ldrh	r3, [r7, #14]
 8006422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006432:	b29b      	uxth	r3, r3
 8006434:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006442:	b480      	push	{r7}
 8006444:	b087      	sub	sp, #28
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	7b1b      	ldrb	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 809d 	bne.w	8006590 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d04c      	beq.n	80064f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	823b      	strh	r3, [r7, #16]
 800646c:	8a3b      	ldrh	r3, [r7, #16]
 800646e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01b      	beq.n	80064ae <USB_EPClearStall+0x6c>
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648c:	81fb      	strh	r3, [r7, #14]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	441a      	add	r2, r3
 8006498:	89fb      	ldrh	r3, [r7, #14]
 800649a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	78db      	ldrb	r3, [r3, #3]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d06c      	beq.n	8006590 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064cc:	81bb      	strh	r3, [r7, #12]
 80064ce:	89bb      	ldrh	r3, [r7, #12]
 80064d0:	f083 0320 	eor.w	r3, r3, #32
 80064d4:	81bb      	strh	r3, [r7, #12]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	441a      	add	r2, r3
 80064e0:	89bb      	ldrh	r3, [r7, #12]
 80064e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	8013      	strh	r3, [r2, #0]
 80064f6:	e04b      	b.n	8006590 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	82fb      	strh	r3, [r7, #22]
 8006506:	8afb      	ldrh	r3, [r7, #22]
 8006508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01b      	beq.n	8006548 <USB_EPClearStall+0x106>
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	82bb      	strh	r3, [r7, #20]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	441a      	add	r2, r3
 8006532:	8abb      	ldrh	r3, [r7, #20]
 8006534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655e:	827b      	strh	r3, [r7, #18]
 8006560:	8a7b      	ldrh	r3, [r7, #18]
 8006562:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006566:	827b      	strh	r3, [r7, #18]
 8006568:	8a7b      	ldrh	r3, [r7, #18]
 800656a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800656e:	827b      	strh	r3, [r7, #18]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	8a7b      	ldrh	r3, [r7, #18]
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2280      	movs	r2, #128	; 0x80
 80065b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr

080065c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr

080065ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr

0800661e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800661e:	b480      	push	{r7}
 8006620:	b08b      	sub	sp, #44	; 0x2c
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	4611      	mov	r1, r2
 800662a:	461a      	mov	r2, r3
 800662c:	460b      	mov	r3, r1
 800662e:	80fb      	strh	r3, [r7, #6]
 8006630:	4613      	mov	r3, r2
 8006632:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006634:	88bb      	ldrh	r3, [r7, #4]
 8006636:	3301      	adds	r3, #1
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006644:	88fb      	ldrh	r3, [r7, #6]
 8006646:	005a      	lsls	r2, r3, #1
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006650:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
 8006656:	e01e      	b.n	8006696 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3301      	adds	r3, #1
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	b21a      	sxth	r2, r3
 8006668:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800666c:	4313      	orrs	r3, r2
 800666e:	b21b      	sxth	r3, r3
 8006670:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	8a7a      	ldrh	r2, [r7, #18]
 8006676:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	3302      	adds	r3, #2
 800667c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	3302      	adds	r3, #2
 8006682:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3301      	adds	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	3b01      	subs	r3, #1
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1dd      	bne.n	8006658 <USB_WritePMA+0x3a>
  }
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	372c      	adds	r7, #44	; 0x2c
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr

080066a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b08b      	sub	sp, #44	; 0x2c
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	460b      	mov	r3, r1
 80066b8:	80fb      	strh	r3, [r7, #6]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80066be:	88bb      	ldrh	r3, [r7, #4]
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	005a      	lsls	r2, r3, #1
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
 80066e0:	e01b      	b.n	800671a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	3302      	adds	r3, #2
 80066ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3301      	adds	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	b2da      	uxtb	r2, r3
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3301      	adds	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	3302      	adds	r3, #2
 8006712:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	3b01      	subs	r3, #1
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e0      	bne.n	80066e2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006720:	88bb      	ldrh	r3, [r7, #4]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	701a      	strb	r2, [r3, #0]
  }
}
 800673c:	bf00      	nop
 800673e:	372c      	adds	r7, #44	; 0x2c
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	7c1b      	ldrb	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d115      	bne.n	800678a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800675e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006762:	2202      	movs	r2, #2
 8006764:	2181      	movs	r1, #129	; 0x81
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fe6b 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006776:	2202      	movs	r2, #2
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fe61 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006788:	e012      	b.n	80067b0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800678a:	2340      	movs	r3, #64	; 0x40
 800678c:	2202      	movs	r2, #2
 800678e:	2181      	movs	r1, #129	; 0x81
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fe56 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800679c:	2340      	movs	r3, #64	; 0x40
 800679e:	2202      	movs	r2, #2
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fe4d 	bl	8008442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067b0:	2308      	movs	r3, #8
 80067b2:	2203      	movs	r2, #3
 80067b4:	2182      	movs	r1, #130	; 0x82
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fe43 	bl	8008442 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067c2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80067c6:	f001 ff63 	bl	8008690 <USBD_static_malloc>
 80067ca:	4602      	mov	r2, r0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
 80067e0:	e026      	b.n	8006830 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7c1b      	ldrb	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006816:	2101      	movs	r1, #1
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 ff03 	bl	8008624 <USBD_LL_PrepareReceive>
 800681e:	e007      	b.n	8006830 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006826:	2340      	movs	r3, #64	; 0x40
 8006828:	2101      	movs	r1, #1
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fefa 	bl	8008624 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800684a:	2181      	movs	r1, #129	; 0x81
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 fe1e 	bl	800848e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006858:	2101      	movs	r1, #1
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fe17 	bl	800848e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006868:	2182      	movs	r1, #130	; 0x82
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fe0f 	bl	800848e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00e      	beq.n	800689e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	4618      	mov	r0, r3
 8006892:	f001 ff09 	bl	80086a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800689e:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d039      	beq.n	8006946 <USBD_CDC_Setup+0x9e>
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d17f      	bne.n	80069d6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d029      	beq.n	8006932 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da11      	bge.n	800690c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	88d2      	ldrh	r2, [r2, #6]
 80068fa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068fc:	6939      	ldr	r1, [r7, #16]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	88db      	ldrh	r3, [r3, #6]
 8006902:	461a      	mov	r2, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f9da 	bl	8007cbe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800690a:	e06b      	b.n	80069e4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785a      	ldrb	r2, [r3, #1]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88db      	ldrh	r3, [r3, #6]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006922:	6939      	ldr	r1, [r7, #16]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	88db      	ldrh	r3, [r3, #6]
 8006928:	461a      	mov	r2, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 f9f5 	bl	8007d1a <USBD_CtlPrepareRx>
      break;
 8006930:	e058      	b.n	80069e4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	7850      	ldrb	r0, [r2, #1]
 800693e:	2200      	movs	r2, #0
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	4798      	blx	r3
      break;
 8006944:	e04e      	b.n	80069e4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b0b      	cmp	r3, #11
 800694c:	d02e      	beq.n	80069ac <USBD_CDC_Setup+0x104>
 800694e:	2b0b      	cmp	r3, #11
 8006950:	dc38      	bgt.n	80069c4 <USBD_CDC_Setup+0x11c>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <USBD_CDC_Setup+0xb4>
 8006956:	2b0a      	cmp	r3, #10
 8006958:	d014      	beq.n	8006984 <USBD_CDC_Setup+0xdc>
 800695a:	e033      	b.n	80069c4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006962:	2b03      	cmp	r3, #3
 8006964:	d107      	bne.n	8006976 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006966:	f107 030c 	add.w	r3, r7, #12
 800696a:	2202      	movs	r2, #2
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 f9a5 	bl	8007cbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006974:	e02e      	b.n	80069d4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 f936 	bl	8007bea <USBD_CtlError>
            ret = USBD_FAIL;
 800697e:	2302      	movs	r3, #2
 8006980:	75fb      	strb	r3, [r7, #23]
          break;
 8006982:	e027      	b.n	80069d4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698a:	2b03      	cmp	r3, #3
 800698c:	d107      	bne.n	800699e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800698e:	f107 030f 	add.w	r3, r7, #15
 8006992:	2201      	movs	r2, #1
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f991 	bl	8007cbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800699c:	e01a      	b.n	80069d4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 f922 	bl	8007bea <USBD_CtlError>
            ret = USBD_FAIL;
 80069a6:	2302      	movs	r3, #2
 80069a8:	75fb      	strb	r3, [r7, #23]
          break;
 80069aa:	e013      	b.n	80069d4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d00d      	beq.n	80069d2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 f916 	bl	8007bea <USBD_CtlError>
            ret = USBD_FAIL;
 80069be:	2302      	movs	r3, #2
 80069c0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069c2:	e006      	b.n	80069d2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 f90f 	bl	8007bea <USBD_CtlError>
          ret = USBD_FAIL;
 80069cc:	2302      	movs	r3, #2
 80069ce:	75fb      	strb	r3, [r7, #23]
          break;
 80069d0:	e000      	b.n	80069d4 <USBD_CDC_Setup+0x12c>
          break;
 80069d2:	bf00      	nop
      }
      break;
 80069d4:	e006      	b.n	80069e4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 f906 	bl	8007bea <USBD_CtlError>
      ret = USBD_FAIL;
 80069de:	2302      	movs	r3, #2
 80069e0:	75fb      	strb	r3, [r7, #23]
      break;
 80069e2:	bf00      	nop
  }

  return ret;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a00:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a08:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d03a      	beq.n	8006a8a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a14:	78fa      	ldrb	r2, [r7, #3]
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	331c      	adds	r3, #28
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d029      	beq.n	8006a7e <USBD_CDC_DataIn+0x90>
 8006a2a:	78fa      	ldrb	r2, [r7, #3]
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	331c      	adds	r3, #28
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	78f9      	ldrb	r1, [r7, #3]
 8006a3e:	68b8      	ldr	r0, [r7, #8]
 8006a40:	460b      	mov	r3, r1
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4403      	add	r3, r0
 8006a4a:	3338      	adds	r3, #56	; 0x38
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d110      	bne.n	8006a7e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a5c:	78fa      	ldrb	r2, [r7, #3]
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	331c      	adds	r3, #28
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a70:	78f9      	ldrb	r1, [r7, #3]
 8006a72:	2300      	movs	r3, #0
 8006a74:	2200      	movs	r2, #0
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fdb1 	bl	80085de <USBD_LL_Transmit>
 8006a7c:	e003      	b.n	8006a86 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e000      	b.n	8006a8c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a8a:	2302      	movs	r3, #2
  }
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 fddc 	bl	800866a <USBD_LL_GetRxDataSize>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00d      	beq.n	8006ae0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4798      	blx	r3

    return USBD_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <USBD_CDC_EP0_RxReady+0x46>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b0a:	2bff      	cmp	r3, #255	; 0xff
 8006b0c:	d010      	beq.n	8006b30 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b24:	b292      	uxth	r2, r2
 8006b26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	22ff      	movs	r2, #255	; 0xff
 8006b2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2243      	movs	r2, #67	; 0x43
 8006b48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b4a:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000094 	.word	0x20000094

08006b5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2243      	movs	r2, #67	; 0x43
 8006b68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b6a:	4b03      	ldr	r3, [pc, #12]	; (8006b78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20000050 	.word	0x20000050

08006b7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2243      	movs	r2, #67	; 0x43
 8006b88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b8a:	4b03      	ldr	r3, [pc, #12]	; (8006b98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	200000d8 	.word	0x200000d8

08006b9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	220a      	movs	r2, #10
 8006ba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	2000000c 	.word	0x2000000c

08006bbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr

08006be8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr

08006c1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d017      	beq.n	8006c8a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7c1b      	ldrb	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fcd8 	bl	8008624 <USBD_LL_PrepareReceive>
 8006c74:	e007      	b.n	8006c86 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	2101      	movs	r1, #1
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fccf 	bl	8008624 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e000      	b.n	8006c8c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c8a:	2302      	movs	r3, #2
  }
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e01a      	b.n	8006ce2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	79fa      	ldrb	r2, [r7, #7]
 8006cd8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f001 fb3c 	bl	8008358 <USBD_LL_Init>

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d006      	beq.n	8006d0c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
 8006d0a:	e001      	b.n	8006d10 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fb71 	bl	800840c <USBD_LL_Start>

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00c      	beq.n	8006d7c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3

  return USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fed7 	bl	8007b72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006de0:	f003 031f 	and.w	r3, r3, #31
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d016      	beq.n	8006e16 <USBD_LL_SetupStage+0x6a>
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d81c      	bhi.n	8006e26 <USBD_LL_SetupStage+0x7a>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <USBD_LL_SetupStage+0x4a>
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d008      	beq.n	8006e06 <USBD_LL_SetupStage+0x5a>
 8006df4:	e017      	b.n	8006e26 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f9ca 	bl	8007198 <USBD_StdDevReq>
      break;
 8006e04:	e01a      	b.n	8006e3c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa2c 	bl	800726c <USBD_StdItfReq>
      break;
 8006e14:	e012      	b.n	8006e3c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa6c 	bl	80072fc <USBD_StdEPReq>
      break;
 8006e24:	e00a      	b.n	8006e3c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 fb49 	bl	80084cc <USBD_LL_StallEP>
      break;
 8006e3a:	bf00      	nop
  }

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b086      	sub	sp, #24
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	607a      	str	r2, [r7, #4]
 8006e52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e54:	7afb      	ldrb	r3, [r7, #11]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d14b      	bne.n	8006ef2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d134      	bne.n	8006ed6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d919      	bls.n	8006eac <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	1ad2      	subs	r2, r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d203      	bcs.n	8006e9a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	e002      	b.n	8006ea0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 ff56 	bl	8007d56 <USBD_CtlContinueRx>
 8006eaa:	e038      	b.n	8006f1e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d105      	bne.n	8006ece <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 ff53 	bl	8007d7a <USBD_CtlSendStatus>
 8006ed4:	e023      	b.n	8006f1e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	d11e      	bne.n	8006f1e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006ee8:	2100      	movs	r1, #0
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f001 faee 	bl	80084cc <USBD_LL_StallEP>
 8006ef0:	e015      	b.n	8006f1e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d108      	bne.n	8006f1a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	7afa      	ldrb	r2, [r7, #11]
 8006f12:	4611      	mov	r1, r2
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	4798      	blx	r3
 8006f18:	e001      	b.n	8006f1e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e000      	b.n	8006f20 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	460b      	mov	r3, r1
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d17f      	bne.n	800703c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d15c      	bne.n	8007006 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d915      	bls.n	8006f84 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	1ad2      	subs	r2, r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fec0 	bl	8007cf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f76:	2300      	movs	r3, #0
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f001 fb51 	bl	8008624 <USBD_LL_PrepareReceive>
 8006f82:	e04e      	b.n	8007022 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	6912      	ldr	r2, [r2, #16]
 8006f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f90:	fb01 f202 	mul.w	r2, r1, r2
 8006f94:	1a9b      	subs	r3, r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d11c      	bne.n	8006fd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d316      	bcc.n	8006fd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d20f      	bcs.n	8006fd4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fe9c 	bl	8007cf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 fb29 	bl	8008624 <USBD_LL_PrepareReceive>
 8006fd2:	e026      	b.n	8007022 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d105      	bne.n	8006ff6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ff6:	2180      	movs	r1, #128	; 0x80
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f001 fa67 	bl	80084cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fece 	bl	8007da0 <USBD_CtlReceiveStatus>
 8007004:	e00d      	b.n	8007022 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800700c:	2b04      	cmp	r3, #4
 800700e:	d004      	beq.n	800701a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800701a:	2180      	movs	r1, #128	; 0x80
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f001 fa55 	bl	80084cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007028:	2b01      	cmp	r3, #1
 800702a:	d11d      	bne.n	8007068 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff fe81 	bl	8006d34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800703a:	e015      	b.n	8007068 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00d      	beq.n	8007064 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800704e:	2b03      	cmp	r3, #3
 8007050:	d108      	bne.n	8007064 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	7afa      	ldrb	r2, [r7, #11]
 800705c:	4611      	mov	r1, r2
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	4798      	blx	r3
 8007062:	e001      	b.n	8007068 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007064:	2302      	movs	r3, #2
 8007066:	e000      	b.n	800706a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800707a:	2340      	movs	r3, #64	; 0x40
 800707c:	2200      	movs	r2, #0
 800707e:	2100      	movs	r1, #0
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f9de 	bl	8008442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2240      	movs	r2, #64	; 0x40
 8007092:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007096:	2340      	movs	r3, #64	; 0x40
 8007098:	2200      	movs	r2, #0
 800709a:	2180      	movs	r1, #128	; 0x80
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f9d0 	bl	8008442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2240      	movs	r2, #64	; 0x40
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6852      	ldr	r2, [r2, #4]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	4611      	mov	r1, r2
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
  }

  return USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr

0800713a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007148:	2b04      	cmp	r3, #4
 800714a:	d105      	bne.n	8007158 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	2b03      	cmp	r3, #3
 8007174:	d10b      	bne.n	800718e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d005      	beq.n	80071be <USBD_StdDevReq+0x26>
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d84f      	bhi.n	8007256 <USBD_StdDevReq+0xbe>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <USBD_StdDevReq+0x36>
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d14b      	bne.n	8007256 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
      break;
 80071cc:	e048      	b.n	8007260 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d839      	bhi.n	800724a <USBD_StdDevReq+0xb2>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <USBD_StdDevReq+0x44>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	0800722d 	.word	0x0800722d
 80071e0:	08007241 	.word	0x08007241
 80071e4:	0800724b 	.word	0x0800724b
 80071e8:	08007237 	.word	0x08007237
 80071ec:	0800724b 	.word	0x0800724b
 80071f0:	0800720f 	.word	0x0800720f
 80071f4:	08007205 	.word	0x08007205
 80071f8:	0800724b 	.word	0x0800724b
 80071fc:	08007223 	.word	0x08007223
 8007200:	08007219 	.word	0x08007219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f9dc 	bl	80075c4 <USBD_GetDescriptor>
          break;
 800720c:	e022      	b.n	8007254 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fb3f 	bl	8007894 <USBD_SetAddress>
          break;
 8007216:	e01d      	b.n	8007254 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fb7e 	bl	800791c <USBD_SetConfig>
          break;
 8007220:	e018      	b.n	8007254 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fc07 	bl	8007a38 <USBD_GetConfig>
          break;
 800722a:	e013      	b.n	8007254 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fc37 	bl	8007aa2 <USBD_GetStatus>
          break;
 8007234:	e00e      	b.n	8007254 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fc65 	bl	8007b08 <USBD_SetFeature>
          break;
 800723e:	e009      	b.n	8007254 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fc74 	bl	8007b30 <USBD_ClrFeature>
          break;
 8007248:	e004      	b.n	8007254 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fccc 	bl	8007bea <USBD_CtlError>
          break;
 8007252:	bf00      	nop
      }
      break;
 8007254:	e004      	b.n	8007260 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fcc6 	bl	8007bea <USBD_CtlError>
      break;
 800725e:	bf00      	nop
  }

  return ret;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop

0800726c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d005      	beq.n	8007292 <USBD_StdItfReq+0x26>
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d82e      	bhi.n	80072e8 <USBD_StdItfReq+0x7c>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <USBD_StdItfReq+0x26>
 800728e:	2b20      	cmp	r3, #32
 8007290:	d12a      	bne.n	80072e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	3b01      	subs	r3, #1
 800729a:	2b02      	cmp	r3, #2
 800729c:	d81d      	bhi.n	80072da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	889b      	ldrh	r3, [r3, #4]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d813      	bhi.n	80072d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	88db      	ldrh	r3, [r3, #6]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d110      	bne.n	80072e4 <USBD_StdItfReq+0x78>
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10d      	bne.n	80072e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fd56 	bl	8007d7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072ce:	e009      	b.n	80072e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fc89 	bl	8007bea <USBD_CtlError>
          break;
 80072d8:	e004      	b.n	80072e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc84 	bl	8007bea <USBD_CtlError>
          break;
 80072e2:	e000      	b.n	80072e6 <USBD_StdItfReq+0x7a>
          break;
 80072e4:	bf00      	nop
      }
      break;
 80072e6:	e004      	b.n	80072f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fc7d 	bl	8007bea <USBD_CtlError>
      break;
 80072f0:	bf00      	nop
  }

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	889b      	ldrh	r3, [r3, #4]
 800730e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d007      	beq.n	800732c <USBD_StdEPReq+0x30>
 800731c:	2b40      	cmp	r3, #64	; 0x40
 800731e:	f200 8146 	bhi.w	80075ae <USBD_StdEPReq+0x2b2>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <USBD_StdEPReq+0x40>
 8007326:	2b20      	cmp	r3, #32
 8007328:	f040 8141 	bne.w	80075ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
      break;
 800733a:	e13d      	b.n	80075b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007344:	2b20      	cmp	r3, #32
 8007346:	d10a      	bne.n	800735e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]

        return ret;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	e12d      	b.n	80075ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d007      	beq.n	8007376 <USBD_StdEPReq+0x7a>
 8007366:	2b03      	cmp	r3, #3
 8007368:	f300 811b 	bgt.w	80075a2 <USBD_StdEPReq+0x2a6>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d072      	beq.n	8007456 <USBD_StdEPReq+0x15a>
 8007370:	2b01      	cmp	r3, #1
 8007372:	d03a      	beq.n	80073ea <USBD_StdEPReq+0xee>
 8007374:	e115      	b.n	80075a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737c:	2b02      	cmp	r3, #2
 800737e:	d002      	beq.n	8007386 <USBD_StdEPReq+0x8a>
 8007380:	2b03      	cmp	r3, #3
 8007382:	d015      	beq.n	80073b0 <USBD_StdEPReq+0xb4>
 8007384:	e02b      	b.n	80073de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00c      	beq.n	80073a6 <USBD_StdEPReq+0xaa>
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b80      	cmp	r3, #128	; 0x80
 8007390:	d009      	beq.n	80073a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 f898 	bl	80084cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800739c:	2180      	movs	r1, #128	; 0x80
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 f894 	bl	80084cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073a4:	e020      	b.n	80073e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc1e 	bl	8007bea <USBD_CtlError>
              break;
 80073ae:	e01b      	b.n	80073e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	885b      	ldrh	r3, [r3, #2]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10e      	bne.n	80073d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <USBD_StdEPReq+0xda>
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b80      	cmp	r3, #128	; 0x80
 80073c2:	d008      	beq.n	80073d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 f87b 	bl	80084cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fccf 	bl	8007d7a <USBD_CtlSendStatus>

              break;
 80073dc:	e004      	b.n	80073e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fc02 	bl	8007bea <USBD_CtlError>
              break;
 80073e6:	bf00      	nop
          }
          break;
 80073e8:	e0e0      	b.n	80075ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d002      	beq.n	80073fa <USBD_StdEPReq+0xfe>
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d015      	beq.n	8007424 <USBD_StdEPReq+0x128>
 80073f8:	e026      	b.n	8007448 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <USBD_StdEPReq+0x11e>
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d009      	beq.n	800741a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 f85e 	bl	80084cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007410:	2180      	movs	r1, #128	; 0x80
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f85a 	bl	80084cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007418:	e01c      	b.n	8007454 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fbe4 	bl	8007bea <USBD_CtlError>
              break;
 8007422:	e017      	b.n	8007454 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	885b      	ldrh	r3, [r3, #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d112      	bne.n	8007452 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 f865 	bl	800850a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fc9a 	bl	8007d7a <USBD_CtlSendStatus>
              }
              break;
 8007446:	e004      	b.n	8007452 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fbcd 	bl	8007bea <USBD_CtlError>
              break;
 8007450:	e000      	b.n	8007454 <USBD_StdEPReq+0x158>
              break;
 8007452:	bf00      	nop
          }
          break;
 8007454:	e0aa      	b.n	80075ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745c:	2b02      	cmp	r3, #2
 800745e:	d002      	beq.n	8007466 <USBD_StdEPReq+0x16a>
 8007460:	2b03      	cmp	r3, #3
 8007462:	d032      	beq.n	80074ca <USBD_StdEPReq+0x1ce>
 8007464:	e097      	b.n	8007596 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d007      	beq.n	800747c <USBD_StdEPReq+0x180>
 800746c:	7bbb      	ldrb	r3, [r7, #14]
 800746e:	2b80      	cmp	r3, #128	; 0x80
 8007470:	d004      	beq.n	800747c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fbb8 	bl	8007bea <USBD_CtlError>
                break;
 800747a:	e091      	b.n	80075a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800747c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	da0b      	bge.n	800749c <USBD_StdEPReq+0x1a0>
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	3310      	adds	r3, #16
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	4413      	add	r3, r2
 8007498:	3304      	adds	r3, #4
 800749a:	e00b      	b.n	80074b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	3304      	adds	r3, #4
 80074b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2202      	movs	r2, #2
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fbfb 	bl	8007cbe <USBD_CtlSendData>
              break;
 80074c8:	e06a      	b.n	80075a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	da11      	bge.n	80074f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	f003 020f 	and.w	r2, r3, #15
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	3318      	adds	r3, #24
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d117      	bne.n	800751c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fb7b 	bl	8007bea <USBD_CtlError>
                  break;
 80074f4:	e054      	b.n	80075a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	f003 020f 	and.w	r2, r3, #15
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fb68 	bl	8007bea <USBD_CtlError>
                  break;
 800751a:	e041      	b.n	80075a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800751c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007520:	2b00      	cmp	r3, #0
 8007522:	da0b      	bge.n	800753c <USBD_StdEPReq+0x240>
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	3310      	adds	r3, #16
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4413      	add	r3, r2
 8007538:	3304      	adds	r3, #4
 800753a:	e00b      	b.n	8007554 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	3304      	adds	r3, #4
 8007554:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <USBD_StdEPReq+0x266>
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	2b80      	cmp	r3, #128	; 0x80
 8007560:	d103      	bne.n	800756a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	e00e      	b.n	8007588 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 ffea 	bl	8008548 <USBD_LL_IsStallEP>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2201      	movs	r2, #1
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e002      	b.n	8007588 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2202      	movs	r2, #2
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fb95 	bl	8007cbe <USBD_CtlSendData>
              break;
 8007594:	e004      	b.n	80075a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fb26 	bl	8007bea <USBD_CtlError>
              break;
 800759e:	bf00      	nop
          }
          break;
 80075a0:	e004      	b.n	80075ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fb20 	bl	8007bea <USBD_CtlError>
          break;
 80075aa:	bf00      	nop
      }
      break;
 80075ac:	e004      	b.n	80075b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fb1a 	bl	8007bea <USBD_CtlError>
      break;
 80075b6:	bf00      	nop
  }

  return ret;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	885b      	ldrh	r3, [r3, #2]
 80075de:	0a1b      	lsrs	r3, r3, #8
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	2b06      	cmp	r3, #6
 80075e6:	f200 8128 	bhi.w	800783a <USBD_GetDescriptor+0x276>
 80075ea:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <USBD_GetDescriptor+0x2c>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	08007625 	.word	0x08007625
 80075f8:	08007665 	.word	0x08007665
 80075fc:	0800783b 	.word	0x0800783b
 8007600:	0800783b 	.word	0x0800783b
 8007604:	080077db 	.word	0x080077db
 8007608:	08007807 	.word	0x08007807
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7c12      	ldrb	r2, [r2, #16]
 8007618:	f107 0108 	add.w	r1, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
      break;
 8007622:	e112      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7c1b      	ldrb	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10d      	bne.n	8007648 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f107 0208 	add.w	r2, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	2202      	movs	r2, #2
 8007644:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007646:	e100      	b.n	800784a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	f107 0208 	add.w	r2, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	2202      	movs	r2, #2
 8007660:	701a      	strb	r2, [r3, #0]
      break;
 8007662:	e0f2      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b05      	cmp	r3, #5
 800766c:	f200 80ac 	bhi.w	80077c8 <USBD_GetDescriptor+0x204>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <USBD_GetDescriptor+0xb4>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007691 	.word	0x08007691
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076f9 	.word	0x080076f9
 8007684:	0800772d 	.word	0x0800772d
 8007688:	08007761 	.word	0x08007761
 800768c:	08007795 	.word	0x08007795
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	7c12      	ldrb	r2, [r2, #16]
 80076a8:	f107 0108 	add.w	r1, r7, #8
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b2:	e091      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fa97 	bl	8007bea <USBD_CtlError>
            err++;
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	3301      	adds	r3, #1
 80076c0:	72fb      	strb	r3, [r7, #11]
          break;
 80076c2:	e089      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e6:	e077      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa7d 	bl	8007bea <USBD_CtlError>
            err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
          break;
 80076f6:	e06f      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	7c12      	ldrb	r2, [r2, #16]
 8007710:	f107 0108 	add.w	r1, r7, #8
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771a:	e05d      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa63 	bl	8007bea <USBD_CtlError>
            err++;
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	3301      	adds	r3, #1
 8007728:	72fb      	strb	r3, [r7, #11]
          break;
 800772a:	e055      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	7c12      	ldrb	r2, [r2, #16]
 8007744:	f107 0108 	add.w	r1, r7, #8
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774e:	e043      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa49 	bl	8007bea <USBD_CtlError>
            err++;
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	3301      	adds	r3, #1
 800775c:	72fb      	strb	r3, [r7, #11]
          break;
 800775e:	e03b      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	7c12      	ldrb	r2, [r2, #16]
 8007778:	f107 0108 	add.w	r1, r7, #8
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007782:	e029      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa2f 	bl	8007bea <USBD_CtlError>
            err++;
 800778c:	7afb      	ldrb	r3, [r7, #11]
 800778e:	3301      	adds	r3, #1
 8007790:	72fb      	strb	r3, [r7, #11]
          break;
 8007792:	e021      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7c12      	ldrb	r2, [r2, #16]
 80077ac:	f107 0108 	add.w	r1, r7, #8
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b6:	e00f      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa15 	bl	8007bea <USBD_CtlError>
            err++;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	3301      	adds	r3, #1
 80077c4:	72fb      	strb	r3, [r7, #11]
          break;
 80077c6:	e007      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa0d 	bl	8007bea <USBD_CtlError>
          err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077d6:	e038      	b.n	800784a <USBD_GetDescriptor+0x286>
 80077d8:	e037      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7c1b      	ldrb	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ea:	f107 0208 	add.w	r2, r7, #8
 80077ee:	4610      	mov	r0, r2
 80077f0:	4798      	blx	r3
 80077f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f4:	e029      	b.n	800784a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f9f6 	bl	8007bea <USBD_CtlError>
        err++;
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	3301      	adds	r3, #1
 8007802:	72fb      	strb	r3, [r7, #11]
      break;
 8007804:	e021      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7c1b      	ldrb	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10d      	bne.n	800782a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f107 0208 	add.w	r2, r7, #8
 800781a:	4610      	mov	r0, r2
 800781c:	4798      	blx	r3
 800781e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	2207      	movs	r2, #7
 8007826:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007828:	e00f      	b.n	800784a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f9dc 	bl	8007bea <USBD_CtlError>
        err++;
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	3301      	adds	r3, #1
 8007836:	72fb      	strb	r3, [r7, #11]
      break;
 8007838:	e007      	b.n	800784a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f9d4 	bl	8007bea <USBD_CtlError>
      err++;
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	3301      	adds	r3, #1
 8007846:	72fb      	strb	r3, [r7, #11]
      break;
 8007848:	bf00      	nop
  }

  if (err != 0U)
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11c      	bne.n	800788a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007850:	893b      	ldrh	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d011      	beq.n	800787a <USBD_GetDescriptor+0x2b6>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	88db      	ldrh	r3, [r3, #6]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00d      	beq.n	800787a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	88da      	ldrh	r2, [r3, #6]
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	4293      	cmp	r3, r2
 8007866:	bf28      	it	cs
 8007868:	4613      	movcs	r3, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800786e:	893b      	ldrh	r3, [r7, #8]
 8007870:	461a      	mov	r2, r3
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa22 	bl	8007cbe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa79 	bl	8007d7a <USBD_CtlSendStatus>
 8007888:	e000      	b.n	800788c <USBD_GetDescriptor+0x2c8>
    return;
 800788a:	bf00      	nop
    }
  }
}
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop

08007894 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	889b      	ldrh	r3, [r3, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d130      	bne.n	8007908 <USBD_SetAddress+0x74>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	88db      	ldrh	r3, [r3, #6]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d12c      	bne.n	8007908 <USBD_SetAddress+0x74>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	2b7f      	cmp	r3, #127	; 0x7f
 80078b4:	d828      	bhi.n	8007908 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	885b      	ldrh	r3, [r3, #2]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d104      	bne.n	80078d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f98b 	bl	8007bea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d4:	e01d      	b.n	8007912 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7bfa      	ldrb	r2, [r7, #15]
 80078da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fe5c 	bl	80085a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fa46 	bl	8007d7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fc:	e009      	b.n	8007912 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	e004      	b.n	8007912 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f96d 	bl	8007bea <USBD_CtlError>
  }
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	885b      	ldrh	r3, [r3, #2]
 800792a:	b2da      	uxtb	r2, r3
 800792c:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <USBD_SetConfig+0x118>)
 800792e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007930:	4b40      	ldr	r3, [pc, #256]	; (8007a34 <USBD_SetConfig+0x118>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d904      	bls.n	8007942 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f955 	bl	8007bea <USBD_CtlError>
 8007940:	e075      	b.n	8007a2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007948:	2b02      	cmp	r3, #2
 800794a:	d002      	beq.n	8007952 <USBD_SetConfig+0x36>
 800794c:	2b03      	cmp	r3, #3
 800794e:	d023      	beq.n	8007998 <USBD_SetConfig+0x7c>
 8007950:	e062      	b.n	8007a18 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007952:	4b38      	ldr	r3, [pc, #224]	; (8007a34 <USBD_SetConfig+0x118>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01a      	beq.n	8007990 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800795a:	4b36      	ldr	r3, [pc, #216]	; (8007a34 <USBD_SetConfig+0x118>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800796c:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <USBD_SetConfig+0x118>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff f9e8 	bl	8006d48 <USBD_SetClassConfig>
 8007978:	4603      	mov	r3, r0
 800797a:	2b02      	cmp	r3, #2
 800797c:	d104      	bne.n	8007988 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f932 	bl	8007bea <USBD_CtlError>
            return;
 8007986:	e052      	b.n	8007a2e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f9f6 	bl	8007d7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800798e:	e04e      	b.n	8007a2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9f2 	bl	8007d7a <USBD_CtlSendStatus>
        break;
 8007996:	e04a      	b.n	8007a2e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007998:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <USBD_SetConfig+0x118>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d112      	bne.n	80079c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079a8:	4b22      	ldr	r3, [pc, #136]	; (8007a34 <USBD_SetConfig+0x118>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <USBD_SetConfig+0x118>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff f9e4 	bl	8006d86 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9db 	bl	8007d7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079c4:	e033      	b.n	8007a2e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079c6:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <USBD_SetConfig+0x118>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d01d      	beq.n	8007a10 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff f9d2 	bl	8006d86 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079e2:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <USBD_SetConfig+0x118>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079ec:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <USBD_SetConfig+0x118>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff f9a8 	bl	8006d48 <USBD_SetClassConfig>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d104      	bne.n	8007a08 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8f2 	bl	8007bea <USBD_CtlError>
            return;
 8007a06:	e012      	b.n	8007a2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9b6 	bl	8007d7a <USBD_CtlSendStatus>
        break;
 8007a0e:	e00e      	b.n	8007a2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f9b2 	bl	8007d7a <USBD_CtlSendStatus>
        break;
 8007a16:	e00a      	b.n	8007a2e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f8e5 	bl	8007bea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a20:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <USBD_SetConfig+0x118>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff f9ad 	bl	8006d86 <USBD_ClrClassConfig>
        break;
 8007a2c:	bf00      	nop
    }
  }
}
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	2000027c 	.word	0x2000027c

08007a38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	88db      	ldrh	r3, [r3, #6]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d004      	beq.n	8007a54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8cc 	bl	8007bea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a52:	e022      	b.n	8007a9a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	dc02      	bgt.n	8007a64 <USBD_GetConfig+0x2c>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dc03      	bgt.n	8007a6a <USBD_GetConfig+0x32>
 8007a62:	e015      	b.n	8007a90 <USBD_GetConfig+0x58>
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d00b      	beq.n	8007a80 <USBD_GetConfig+0x48>
 8007a68:	e012      	b.n	8007a90 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3308      	adds	r3, #8
 8007a74:	2201      	movs	r2, #1
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f920 	bl	8007cbe <USBD_CtlSendData>
        break;
 8007a7e:	e00c      	b.n	8007a9a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3304      	adds	r3, #4
 8007a84:	2201      	movs	r2, #1
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f918 	bl	8007cbe <USBD_CtlSendData>
        break;
 8007a8e:	e004      	b.n	8007a9a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f8a9 	bl	8007bea <USBD_CtlError>
        break;
 8007a98:	bf00      	nop
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d81e      	bhi.n	8007af6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	88db      	ldrh	r3, [r3, #6]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d004      	beq.n	8007aca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f891 	bl	8007bea <USBD_CtlError>
        break;
 8007ac8:	e01a      	b.n	8007b00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f043 0202 	orr.w	r2, r3, #2
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	2202      	movs	r2, #2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f8e5 	bl	8007cbe <USBD_CtlSendData>
      break;
 8007af4:	e004      	b.n	8007b00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f876 	bl	8007bea <USBD_CtlError>
      break;
 8007afe:	bf00      	nop
  }
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d106      	bne.n	8007b28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f929 	bl	8007d7a <USBD_CtlSendStatus>
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b40:	3b01      	subs	r3, #1
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d80b      	bhi.n	8007b5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d10c      	bne.n	8007b68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f90f 	bl	8007d7a <USBD_CtlSendStatus>
      }
      break;
 8007b5c:	e004      	b.n	8007b68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f842 	bl	8007bea <USBD_CtlError>
      break;
 8007b66:	e000      	b.n	8007b6a <USBD_ClrFeature+0x3a>
      break;
 8007b68:	bf00      	nop
  }
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781a      	ldrb	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	785a      	ldrb	r2, [r3, #1]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	3302      	adds	r3, #2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	3303      	adds	r3, #3
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	3304      	adds	r3, #4
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	3305      	adds	r3, #5
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	3306      	adds	r3, #6
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	3307      	adds	r3, #7
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	4413      	add	r3, r2
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	80da      	strh	r2, [r3, #6]

}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr

08007bea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bf4:	2180      	movs	r1, #128	; 0x80
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fc68 	bl	80084cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fc64 	bl	80084cc <USBD_LL_StallEP>
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d032      	beq.n	8007c88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f834 	bl	8007c90 <USBD_GetLen>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	75fa      	strb	r2, [r7, #23]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c48:	7dfb      	ldrb	r3, [r7, #23]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	75fa      	strb	r2, [r7, #23]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4413      	add	r3, r2
 8007c54:	2203      	movs	r2, #3
 8007c56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c58:	e012      	b.n	8007c80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	60fa      	str	r2, [r7, #12]
 8007c60:	7dfa      	ldrb	r2, [r7, #23]
 8007c62:	1c51      	adds	r1, r2, #1
 8007c64:	75f9      	strb	r1, [r7, #23]
 8007c66:	4611      	mov	r1, r2
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	440a      	add	r2, r1
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	75fa      	strb	r2, [r7, #23]
 8007c76:	461a      	mov	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e8      	bne.n	8007c5a <USBD_GetString+0x4e>
    }
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c9c:	e005      	b.n	8007caa <USBD_GetLen+0x1a>
  {
    len++;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f5      	bne.n	8007c9e <USBD_GetLen+0xe>
  }

  return len;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr

08007cbe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cd4:	88fa      	ldrh	r2, [r7, #6]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007cda:	88fa      	ldrh	r2, [r7, #6]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ce0:	88fb      	ldrh	r3, [r7, #6]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 fc79 	bl	80085de <USBD_LL_Transmit>

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fc67 	bl	80085de <USBD_LL_Transmit>

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d38:	88fa      	ldrh	r2, [r7, #6]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	2100      	movs	r1, #0
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fc6c 	bl	8008624 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	4613      	mov	r3, r2
 8007d62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fc5a 	bl	8008624 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2204      	movs	r2, #4
 8007d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc24 	bl	80085de <USBD_LL_Transmit>

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2205      	movs	r2, #5
 8007dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007db0:	2300      	movs	r3, #0
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fc34 	bl	8008624 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
	...

08007dc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4912      	ldr	r1, [pc, #72]	; (8007e18 <MX_USB_DEVICE_Init+0x50>)
 8007dd0:	4812      	ldr	r0, [pc, #72]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007dd2:	f7fe ff5f 	bl	8006c94 <USBD_Init>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ddc:	f7f8 fc7c 	bl	80006d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007de0:	490f      	ldr	r1, [pc, #60]	; (8007e20 <MX_USB_DEVICE_Init+0x58>)
 8007de2:	480e      	ldr	r0, [pc, #56]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007de4:	f7fe ff81 	bl	8006cea <USBD_RegisterClass>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dee:	f7f8 fc73 	bl	80006d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007df2:	490c      	ldr	r1, [pc, #48]	; (8007e24 <MX_USB_DEVICE_Init+0x5c>)
 8007df4:	4809      	ldr	r0, [pc, #36]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007df6:	f7fe fee1 	bl	8006bbc <USBD_CDC_RegisterInterface>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e00:	f7f8 fc6a 	bl	80006d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e04:	4805      	ldr	r0, [pc, #20]	; (8007e1c <MX_USB_DEVICE_Init+0x54>)
 8007e06:	f7fe ff89 	bl	8006d1c <USBD_Start>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e10:	f7f8 fc62 	bl	80006d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e14:	bf00      	nop
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	2000012c 	.word	0x2000012c
 8007e1c:	20000280 	.word	0x20000280
 8007e20:	20000018 	.word	0x20000018
 8007e24:	2000011c 	.word	0x2000011c

08007e28 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4905      	ldr	r1, [pc, #20]	; (8007e44 <CDC_Init_FS+0x1c>)
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <CDC_Init_FS+0x20>)
 8007e32:	f7fe fed9 	bl	8006be8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e36:	4905      	ldr	r1, [pc, #20]	; (8007e4c <CDC_Init_FS+0x24>)
 8007e38:	4803      	ldr	r0, [pc, #12]	; (8007e48 <CDC_Init_FS+0x20>)
 8007e3a:	f7fe feee 	bl	8006c1a <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007e3e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000d44 	.word	0x20000d44
 8007e48:	20000280 	.word	0x20000280
 8007e4c:	20000544 	.word	0x20000544

08007e50 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007e54:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr
	...

08007e60 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b23      	cmp	r3, #35	; 0x23
 8007e74:	d84a      	bhi.n	8007f0c <CDC_Control_FS+0xac>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <CDC_Control_FS+0x1c>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007f0d 	.word	0x08007f0d
 8007e80:	08007f0d 	.word	0x08007f0d
 8007e84:	08007f0d 	.word	0x08007f0d
 8007e88:	08007f0d 	.word	0x08007f0d
 8007e8c:	08007f0d 	.word	0x08007f0d
 8007e90:	08007f0d 	.word	0x08007f0d
 8007e94:	08007f0d 	.word	0x08007f0d
 8007e98:	08007f0d 	.word	0x08007f0d
 8007e9c:	08007f0d 	.word	0x08007f0d
 8007ea0:	08007f0d 	.word	0x08007f0d
 8007ea4:	08007f0d 	.word	0x08007f0d
 8007ea8:	08007f0d 	.word	0x08007f0d
 8007eac:	08007f0d 	.word	0x08007f0d
 8007eb0:	08007f0d 	.word	0x08007f0d
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007f0d 	.word	0x08007f0d
 8007ec0:	08007f0d 	.word	0x08007f0d
 8007ec4:	08007f0d 	.word	0x08007f0d
 8007ec8:	08007f0d 	.word	0x08007f0d
 8007ecc:	08007f0d 	.word	0x08007f0d
 8007ed0:	08007f0d 	.word	0x08007f0d
 8007ed4:	08007f0d 	.word	0x08007f0d
 8007ed8:	08007f0d 	.word	0x08007f0d
 8007edc:	08007f0d 	.word	0x08007f0d
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f0d 	.word	0x08007f0d
 8007ee8:	08007f0d 	.word	0x08007f0d
 8007eec:	08007f0d 	.word	0x08007f0d
 8007ef0:	08007f0d 	.word	0x08007f0d
 8007ef4:	08007f0d 	.word	0x08007f0d
 8007ef8:	08007f0d 	.word	0x08007f0d
 8007efc:	08007f0d 	.word	0x08007f0d
 8007f00:	08007f0d 	.word	0x08007f0d
 8007f04:	08007f0d 	.word	0x08007f0d
 8007f08:	08007f0d 	.word	0x08007f0d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007f0c:	bf00      	nop
	}

	return (USBD_OK);
 8007f0e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	dataSize = *Len;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1d      	ldr	r2, [pc, #116]	; (8007fa0 <CDC_Receive_FS+0x84>)
 8007f2c:	6013      	str	r3, [r2, #0]
	if (HAL_GetTick() - time > 1000) {
 8007f2e:	f7f8 fd7f 	bl	8000a30 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <CDC_Receive_FS+0x88>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f3e:	d91a      	bls.n	8007f76 <CDC_Receive_FS+0x5a>
		Rxcount = 0;
 8007f40:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <CDC_Receive_FS+0x8c>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < dataSize; i++) {
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	e00f      	b.n	8007f6c <CDC_Receive_FS+0x50>
			ReceivedData[Rxcount++] = Buf[i];
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	441a      	add	r2, r3
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <CDC_Receive_FS+0x8c>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	1c59      	adds	r1, r3, #1
 8007f58:	b2c8      	uxtb	r0, r1
 8007f5a:	4913      	ldr	r1, [pc, #76]	; (8007fa8 <CDC_Receive_FS+0x8c>)
 8007f5c:	7008      	strb	r0, [r1, #0]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	7812      	ldrb	r2, [r2, #0]
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <CDC_Receive_FS+0x90>)
 8007f64:	545a      	strb	r2, [r3, r1]
		for (int i = 0; i < dataSize; i++) {
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <CDC_Receive_FS+0x84>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d3ea      	bcc.n	8007f4c <CDC_Receive_FS+0x30>
		}
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	480d      	ldr	r0, [pc, #52]	; (8007fb0 <CDC_Receive_FS+0x94>)
 8007f7a:	f7fe fe4e 	bl	8006c1a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f7e:	480c      	ldr	r0, [pc, #48]	; (8007fb0 <CDC_Receive_FS+0x94>)
 8007f80:	f7fe fe5e 	bl	8006c40 <USBD_CDC_ReceivePacket>
	check = 1;
 8007f84:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <CDC_Receive_FS+0x98>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	701a      	strb	r2, [r3, #0]
	time = HAL_GetTick();
 8007f8a:	f7f8 fd51 	bl	8000a30 <HAL_GetTick>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4a04      	ldr	r2, [pc, #16]	; (8007fa4 <CDC_Receive_FS+0x88>)
 8007f92:	6013      	str	r3, [r2, #0]
	return (USBD_OK);
 8007f94:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	200015b0 	.word	0x200015b0
 8007fa4:	20001544 	.word	0x20001544
 8007fa8:	200015ac 	.word	0x200015ac
 8007fac:	20001548 	.word	0x20001548
 8007fb0:	20000280 	.word	0x20000280
 8007fb4:	200015b4 	.word	0x200015b4

08007fb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2212      	movs	r2, #18
 8007fc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000148 	.word	0x20000148

08007fdc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2204      	movs	r2, #4
 8007fec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fee:	4b03      	ldr	r3, [pc, #12]	; (8007ffc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bc80      	pop	{r7}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	2000015c 	.word	0x2000015c

08008000 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	6039      	str	r1, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d105      	bne.n	800801e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4907      	ldr	r1, [pc, #28]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
 8008016:	4808      	ldr	r0, [pc, #32]	; (8008038 <USBD_FS_ProductStrDescriptor+0x38>)
 8008018:	f7ff fdf8 	bl	8007c0c <USBD_GetString>
 800801c:	e004      	b.n	8008028 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	4904      	ldr	r1, [pc, #16]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
 8008022:	4805      	ldr	r0, [pc, #20]	; (8008038 <USBD_FS_ProductStrDescriptor+0x38>)
 8008024:	f7ff fdf2 	bl	8007c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008028:	4b02      	ldr	r3, [pc, #8]	; (8008034 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	200015b8 	.word	0x200015b8
 8008038:	08009128 	.word	0x08009128

0800803c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	4904      	ldr	r1, [pc, #16]	; (800805c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800804c:	4804      	ldr	r0, [pc, #16]	; (8008060 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800804e:	f7ff fddd 	bl	8007c0c <USBD_GetString>
  return USBD_StrDesc;
 8008052:	4b02      	ldr	r3, [pc, #8]	; (800805c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200015b8 	.word	0x200015b8
 8008060:	08009140 	.word	0x08009140

08008064 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	4603      	mov	r3, r0
 800806c:	6039      	str	r1, [r7, #0]
 800806e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	221a      	movs	r2, #26
 8008074:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008076:	f000 f843 	bl	8008100 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800807a:	4b02      	ldr	r3, [pc, #8]	; (8008084 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000160 	.word	0x20000160

08008088 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d105      	bne.n	80080a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	4907      	ldr	r1, [pc, #28]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800809e:	4808      	ldr	r0, [pc, #32]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080a0:	f7ff fdb4 	bl	8007c0c <USBD_GetString>
 80080a4:	e004      	b.n	80080b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	4904      	ldr	r1, [pc, #16]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080aa:	4805      	ldr	r0, [pc, #20]	; (80080c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080ac:	f7ff fdae 	bl	8007c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80080b0:	4b02      	ldr	r3, [pc, #8]	; (80080bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	200015b8 	.word	0x200015b8
 80080c0:	08009154 	.word	0x08009154

080080c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d105      	bne.n	80080e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	4907      	ldr	r1, [pc, #28]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080da:	4808      	ldr	r0, [pc, #32]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080dc:	f7ff fd96 	bl	8007c0c <USBD_GetString>
 80080e0:	e004      	b.n	80080ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	4904      	ldr	r1, [pc, #16]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080e6:	4805      	ldr	r0, [pc, #20]	; (80080fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080e8:	f7ff fd90 	bl	8007c0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80080ec:	4b02      	ldr	r3, [pc, #8]	; (80080f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200015b8 	.word	0x200015b8
 80080fc:	08009160 	.word	0x08009160

08008100 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008106:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <Get_SerialNum+0x44>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800810c:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <Get_SerialNum+0x48>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008112:	4b0e      	ldr	r3, [pc, #56]	; (800814c <Get_SerialNum+0x4c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008126:	2208      	movs	r2, #8
 8008128:	4909      	ldr	r1, [pc, #36]	; (8008150 <Get_SerialNum+0x50>)
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 f814 	bl	8008158 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008130:	2204      	movs	r2, #4
 8008132:	4908      	ldr	r1, [pc, #32]	; (8008154 <Get_SerialNum+0x54>)
 8008134:	68b8      	ldr	r0, [r7, #8]
 8008136:	f000 f80f 	bl	8008158 <IntToUnicode>
  }
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	1ffff7e8 	.word	0x1ffff7e8
 8008148:	1ffff7ec 	.word	0x1ffff7ec
 800814c:	1ffff7f0 	.word	0x1ffff7f0
 8008150:	20000162 	.word	0x20000162
 8008154:	20000172 	.word	0x20000172

08008158 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4613      	mov	r3, r2
 8008164:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]
 800816e:	e027      	b.n	80081c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	0f1b      	lsrs	r3, r3, #28
 8008174:	2b09      	cmp	r3, #9
 8008176:	d80b      	bhi.n	8008190 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	0f1b      	lsrs	r3, r3, #28
 800817c:	b2da      	uxtb	r2, r3
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	4619      	mov	r1, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	440b      	add	r3, r1
 8008188:	3230      	adds	r2, #48	; 0x30
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e00a      	b.n	80081a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	0f1b      	lsrs	r3, r3, #28
 8008194:	b2da      	uxtb	r2, r3
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4619      	mov	r1, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	440b      	add	r3, r1
 80081a0:	3237      	adds	r2, #55	; 0x37
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	3301      	adds	r3, #1
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	4413      	add	r3, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	3301      	adds	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
 80081c0:	7dfa      	ldrb	r2, [r7, #23]
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d3d3      	bcc.n	8008170 <IntToUnicode+0x18>
  }
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0d      	ldr	r2, [pc, #52]	; (8008218 <HAL_PCD_MspInit+0x44>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d113      	bne.n	800820e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80081e6:	4b0d      	ldr	r3, [pc, #52]	; (800821c <HAL_PCD_MspInit+0x48>)
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4a0c      	ldr	r2, [pc, #48]	; (800821c <HAL_PCD_MspInit+0x48>)
 80081ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80081f0:	61d3      	str	r3, [r2, #28]
 80081f2:	4b0a      	ldr	r3, [pc, #40]	; (800821c <HAL_PCD_MspInit+0x48>)
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081fe:	2200      	movs	r2, #0
 8008200:	2100      	movs	r1, #0
 8008202:	2014      	movs	r0, #20
 8008204:	f7f9 f86b 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008208:	2014      	movs	r0, #20
 800820a:	f7f9 f884 	bl	8001316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	40005c00 	.word	0x40005c00
 800821c:	40021000 	.word	0x40021000

08008220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f7fe fdb8 	bl	8006dac <USBD_LL_SetupStage>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	440b      	add	r3, r1
 8008264:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	4619      	mov	r1, r3
 800826e:	f7fe fdea 	bl	8006e46 <USBD_LL_DataOutStage>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	440b      	add	r3, r1
 800829a:	333c      	adds	r3, #60	; 0x3c
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7fe fe41 	bl	8006f28 <USBD_LL_DataInStage>
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe ff51 	bl	8007164 <USBD_LL_SOF>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d001      	beq.n	80082e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082de:	f7f8 f9fb 	bl	80006d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082e8:	7bfa      	ldrb	r2, [r7, #15]
 80082ea:	4611      	mov	r1, r2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe ff01 	bl	80070f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe feba 	bl	8007072 <USBD_LL_Reset>
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fefb 	bl	8007112 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008324:	4b04      	ldr	r3, [pc, #16]	; (8008338 <HAL_PCD_SuspendCallback+0x30>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4a03      	ldr	r2, [pc, #12]	; (8008338 <HAL_PCD_SuspendCallback+0x30>)
 800832a:	f043 0306 	orr.w	r3, r3, #6
 800832e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed00 	.word	0xe000ed00

0800833c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fef5 	bl	800713a <USBD_LL_Resume>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008360:	4a28      	ldr	r2, [pc, #160]	; (8008404 <USBD_LL_Init+0xac>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a26      	ldr	r2, [pc, #152]	; (8008404 <USBD_LL_Init+0xac>)
 800836c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008370:	4b24      	ldr	r3, [pc, #144]	; (8008404 <USBD_LL_Init+0xac>)
 8008372:	4a25      	ldr	r2, [pc, #148]	; (8008408 <USBD_LL_Init+0xb0>)
 8008374:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008376:	4b23      	ldr	r3, [pc, #140]	; (8008404 <USBD_LL_Init+0xac>)
 8008378:	2208      	movs	r2, #8
 800837a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800837c:	4b21      	ldr	r3, [pc, #132]	; (8008404 <USBD_LL_Init+0xac>)
 800837e:	2202      	movs	r2, #2
 8008380:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008382:	4b20      	ldr	r3, [pc, #128]	; (8008404 <USBD_LL_Init+0xac>)
 8008384:	2200      	movs	r2, #0
 8008386:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008388:	4b1e      	ldr	r3, [pc, #120]	; (8008404 <USBD_LL_Init+0xac>)
 800838a:	2200      	movs	r2, #0
 800838c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800838e:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <USBD_LL_Init+0xac>)
 8008390:	2200      	movs	r2, #0
 8008392:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008394:	481b      	ldr	r0, [pc, #108]	; (8008404 <USBD_LL_Init+0xac>)
 8008396:	f7f9 f9a5 	bl	80016e4 <HAL_PCD_Init>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083a0:	f7f8 f99a 	bl	80006d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083aa:	2318      	movs	r3, #24
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	f7fa fec4 	bl	800313c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ba:	2358      	movs	r3, #88	; 0x58
 80083bc:	2200      	movs	r2, #0
 80083be:	2180      	movs	r1, #128	; 0x80
 80083c0:	f7fa febc 	bl	800313c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ca:	23c0      	movs	r3, #192	; 0xc0
 80083cc:	2200      	movs	r2, #0
 80083ce:	2181      	movs	r1, #129	; 0x81
 80083d0:	f7fa feb4 	bl	800313c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80083de:	2200      	movs	r2, #0
 80083e0:	2101      	movs	r1, #1
 80083e2:	f7fa feab 	bl	800313c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083f0:	2200      	movs	r2, #0
 80083f2:	2182      	movs	r1, #130	; 0x82
 80083f4:	f7fa fea2 	bl	800313c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	200017b8 	.word	0x200017b8
 8008408:	40005c00 	.word	0x40005c00

0800840c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 fa5d 	bl	80018e2 <HAL_PCD_Start>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f94e 	bl	80086d0 <USBD_Get_USB_Status>
 8008434:	4603      	mov	r3, r0
 8008436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008438:	7bbb      	ldrb	r3, [r7, #14]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	461a      	mov	r2, r3
 8008450:	4603      	mov	r3, r0
 8008452:	70fb      	strb	r3, [r7, #3]
 8008454:	460b      	mov	r3, r1
 8008456:	70bb      	strb	r3, [r7, #2]
 8008458:	4613      	mov	r3, r2
 800845a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800846a:	78bb      	ldrb	r3, [r7, #2]
 800846c:	883a      	ldrh	r2, [r7, #0]
 800846e:	78f9      	ldrb	r1, [r7, #3]
 8008470:	f7f9 fbb2 	bl	8001bd8 <HAL_PCD_EP_Open>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f928 	bl	80086d0 <USBD_Get_USB_Status>
 8008480:	4603      	mov	r3, r0
 8008482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008484:	7bbb      	ldrb	r3, [r7, #14]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084a8:	78fa      	ldrb	r2, [r7, #3]
 80084aa:	4611      	mov	r1, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7f9 fbf0 	bl	8001c92 <HAL_PCD_EP_Close>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f909 	bl	80086d0 <USBD_Get_USB_Status>
 80084be:	4603      	mov	r3, r0
 80084c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f9 fc98 	bl	8001e20 <HAL_PCD_EP_SetStall>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f8ea 	bl	80086d0 <USBD_Get_USB_Status>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008500:	7bbb      	ldrb	r3, [r7, #14]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f7f9 fcd9 	bl	8001ee0 <HAL_PCD_EP_ClrStall>
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f8cb 	bl	80086d0 <USBD_Get_USB_Status>
 800853a:	4603      	mov	r3, r0
 800853c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800855a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800855c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008560:	2b00      	cmp	r3, #0
 8008562:	da0c      	bge.n	800857e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	00db      	lsls	r3, r3, #3
 8008576:	440b      	add	r3, r1
 8008578:	3302      	adds	r3, #2
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	e00b      	b.n	8008596 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008584:	68f9      	ldr	r1, [r7, #12]
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	440b      	add	r3, r1
 8008590:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008594:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f9 fae5 	bl	8001b8e <HAL_PCD_SetAddress>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f880 	bl	80086d0 <USBD_Get_USB_Status>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b086      	sub	sp, #24
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	461a      	mov	r2, r3
 80085ea:	460b      	mov	r3, r1
 80085ec:	72fb      	strb	r3, [r7, #11]
 80085ee:	4613      	mov	r3, r2
 80085f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008600:	893b      	ldrh	r3, [r7, #8]
 8008602:	7af9      	ldrb	r1, [r7, #11]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	f7f9 fbd4 	bl	8001db2 <HAL_PCD_EP_Transmit>
 800860a:	4603      	mov	r3, r0
 800860c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f85d 	bl	80086d0 <USBD_Get_USB_Status>
 8008616:	4603      	mov	r3, r0
 8008618:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800861a:	7dbb      	ldrb	r3, [r7, #22]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	607a      	str	r2, [r7, #4]
 800862e:	461a      	mov	r2, r3
 8008630:	460b      	mov	r3, r1
 8008632:	72fb      	strb	r3, [r7, #11]
 8008634:	4613      	mov	r3, r2
 8008636:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008646:	893b      	ldrh	r3, [r7, #8]
 8008648:	7af9      	ldrb	r1, [r7, #11]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	f7f9 fb69 	bl	8001d22 <HAL_PCD_EP_Receive>
 8008650:	4603      	mov	r3, r0
 8008652:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 f83a 	bl	80086d0 <USBD_Get_USB_Status>
 800865c:	4603      	mov	r3, r0
 800865e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008660:	7dbb      	ldrb	r3, [r7, #22]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7f9 fb7f 	bl	8001d84 <HAL_PCD_EP_GetRxCount>
 8008686:	4603      	mov	r3, r0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008698:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <USBD_static_malloc+0x14>)
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr
 80086a4:	20001aa8 	.word	0x20001aa8

080086a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr

080086d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d817      	bhi.n	8008714 <USBD_Get_USB_Status+0x44>
 80086e4:	a201      	add	r2, pc, #4	; (adr r2, 80086ec <USBD_Get_USB_Status+0x1c>)
 80086e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ea:	bf00      	nop
 80086ec:	080086fd 	.word	0x080086fd
 80086f0:	08008703 	.word	0x08008703
 80086f4:	08008709 	.word	0x08008709
 80086f8:	0800870f 	.word	0x0800870f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008700:	e00b      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008702:	2302      	movs	r3, #2
 8008704:	73fb      	strb	r3, [r7, #15]
    break;
 8008706:	e008      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008708:	2301      	movs	r3, #1
 800870a:	73fb      	strb	r3, [r7, #15]
    break;
 800870c:	e005      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800870e:	2302      	movs	r3, #2
 8008710:	73fb      	strb	r3, [r7, #15]
    break;
 8008712:	e002      	b.n	800871a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008714:	2302      	movs	r3, #2
 8008716:	73fb      	strb	r3, [r7, #15]
    break;
 8008718:	bf00      	nop
  }
  return usb_status;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop

08008728 <__errno>:
 8008728:	4b01      	ldr	r3, [pc, #4]	; (8008730 <__errno+0x8>)
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	2000017c 	.word	0x2000017c

08008734 <__libc_init_array>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	2600      	movs	r6, #0
 8008738:	4d0c      	ldr	r5, [pc, #48]	; (800876c <__libc_init_array+0x38>)
 800873a:	4c0d      	ldr	r4, [pc, #52]	; (8008770 <__libc_init_array+0x3c>)
 800873c:	1b64      	subs	r4, r4, r5
 800873e:	10a4      	asrs	r4, r4, #2
 8008740:	42a6      	cmp	r6, r4
 8008742:	d109      	bne.n	8008758 <__libc_init_array+0x24>
 8008744:	f000 fca8 	bl	8009098 <_init>
 8008748:	2600      	movs	r6, #0
 800874a:	4d0a      	ldr	r5, [pc, #40]	; (8008774 <__libc_init_array+0x40>)
 800874c:	4c0a      	ldr	r4, [pc, #40]	; (8008778 <__libc_init_array+0x44>)
 800874e:	1b64      	subs	r4, r4, r5
 8008750:	10a4      	asrs	r4, r4, #2
 8008752:	42a6      	cmp	r6, r4
 8008754:	d105      	bne.n	8008762 <__libc_init_array+0x2e>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	f855 3b04 	ldr.w	r3, [r5], #4
 800875c:	4798      	blx	r3
 800875e:	3601      	adds	r6, #1
 8008760:	e7ee      	b.n	8008740 <__libc_init_array+0xc>
 8008762:	f855 3b04 	ldr.w	r3, [r5], #4
 8008766:	4798      	blx	r3
 8008768:	3601      	adds	r6, #1
 800876a:	e7f2      	b.n	8008752 <__libc_init_array+0x1e>
 800876c:	080091d0 	.word	0x080091d0
 8008770:	080091d0 	.word	0x080091d0
 8008774:	080091d0 	.word	0x080091d0
 8008778:	080091d4 	.word	0x080091d4

0800877c <memset>:
 800877c:	4603      	mov	r3, r0
 800877e:	4402      	add	r2, r0
 8008780:	4293      	cmp	r3, r2
 8008782:	d100      	bne.n	8008786 <memset+0xa>
 8008784:	4770      	bx	lr
 8008786:	f803 1b01 	strb.w	r1, [r3], #1
 800878a:	e7f9      	b.n	8008780 <memset+0x4>

0800878c <siprintf>:
 800878c:	b40e      	push	{r1, r2, r3}
 800878e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008792:	b500      	push	{lr}
 8008794:	b09c      	sub	sp, #112	; 0x70
 8008796:	ab1d      	add	r3, sp, #116	; 0x74
 8008798:	9002      	str	r0, [sp, #8]
 800879a:	9006      	str	r0, [sp, #24]
 800879c:	9107      	str	r1, [sp, #28]
 800879e:	9104      	str	r1, [sp, #16]
 80087a0:	4808      	ldr	r0, [pc, #32]	; (80087c4 <siprintf+0x38>)
 80087a2:	4909      	ldr	r1, [pc, #36]	; (80087c8 <siprintf+0x3c>)
 80087a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a8:	9105      	str	r1, [sp, #20]
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	a902      	add	r1, sp, #8
 80087ae:	9301      	str	r3, [sp, #4]
 80087b0:	f000 f874 	bl	800889c <_svfiprintf_r>
 80087b4:	2200      	movs	r2, #0
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	b01c      	add	sp, #112	; 0x70
 80087bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c0:	b003      	add	sp, #12
 80087c2:	4770      	bx	lr
 80087c4:	2000017c 	.word	0x2000017c
 80087c8:	ffff0208 	.word	0xffff0208

080087cc <strchr>:
 80087cc:	4603      	mov	r3, r0
 80087ce:	b2c9      	uxtb	r1, r1
 80087d0:	4618      	mov	r0, r3
 80087d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d6:	b112      	cbz	r2, 80087de <strchr+0x12>
 80087d8:	428a      	cmp	r2, r1
 80087da:	d1f9      	bne.n	80087d0 <strchr+0x4>
 80087dc:	4770      	bx	lr
 80087de:	2900      	cmp	r1, #0
 80087e0:	bf18      	it	ne
 80087e2:	2000      	movne	r0, #0
 80087e4:	4770      	bx	lr

080087e6 <__ssputs_r>:
 80087e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ea:	688e      	ldr	r6, [r1, #8]
 80087ec:	4682      	mov	sl, r0
 80087ee:	429e      	cmp	r6, r3
 80087f0:	460c      	mov	r4, r1
 80087f2:	4690      	mov	r8, r2
 80087f4:	461f      	mov	r7, r3
 80087f6:	d838      	bhi.n	800886a <__ssputs_r+0x84>
 80087f8:	898a      	ldrh	r2, [r1, #12]
 80087fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087fe:	d032      	beq.n	8008866 <__ssputs_r+0x80>
 8008800:	6825      	ldr	r5, [r4, #0]
 8008802:	6909      	ldr	r1, [r1, #16]
 8008804:	3301      	adds	r3, #1
 8008806:	eba5 0901 	sub.w	r9, r5, r1
 800880a:	6965      	ldr	r5, [r4, #20]
 800880c:	444b      	add	r3, r9
 800880e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008816:	106d      	asrs	r5, r5, #1
 8008818:	429d      	cmp	r5, r3
 800881a:	bf38      	it	cc
 800881c:	461d      	movcc	r5, r3
 800881e:	0553      	lsls	r3, r2, #21
 8008820:	d531      	bpl.n	8008886 <__ssputs_r+0xa0>
 8008822:	4629      	mov	r1, r5
 8008824:	f000 fb6e 	bl	8008f04 <_malloc_r>
 8008828:	4606      	mov	r6, r0
 800882a:	b950      	cbnz	r0, 8008842 <__ssputs_r+0x5c>
 800882c:	230c      	movs	r3, #12
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	f8ca 3000 	str.w	r3, [sl]
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008842:	464a      	mov	r2, r9
 8008844:	6921      	ldr	r1, [r4, #16]
 8008846:	f000 facd 	bl	8008de4 <memcpy>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	6126      	str	r6, [r4, #16]
 8008858:	444e      	add	r6, r9
 800885a:	6026      	str	r6, [r4, #0]
 800885c:	463e      	mov	r6, r7
 800885e:	6165      	str	r5, [r4, #20]
 8008860:	eba5 0509 	sub.w	r5, r5, r9
 8008864:	60a5      	str	r5, [r4, #8]
 8008866:	42be      	cmp	r6, r7
 8008868:	d900      	bls.n	800886c <__ssputs_r+0x86>
 800886a:	463e      	mov	r6, r7
 800886c:	4632      	mov	r2, r6
 800886e:	4641      	mov	r1, r8
 8008870:	6820      	ldr	r0, [r4, #0]
 8008872:	f000 fac5 	bl	8008e00 <memmove>
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	2000      	movs	r0, #0
 800887a:	1b9b      	subs	r3, r3, r6
 800887c:	60a3      	str	r3, [r4, #8]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	4433      	add	r3, r6
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	e7db      	b.n	800883e <__ssputs_r+0x58>
 8008886:	462a      	mov	r2, r5
 8008888:	f000 fbb0 	bl	8008fec <_realloc_r>
 800888c:	4606      	mov	r6, r0
 800888e:	2800      	cmp	r0, #0
 8008890:	d1e1      	bne.n	8008856 <__ssputs_r+0x70>
 8008892:	4650      	mov	r0, sl
 8008894:	6921      	ldr	r1, [r4, #16]
 8008896:	f000 facd 	bl	8008e34 <_free_r>
 800889a:	e7c7      	b.n	800882c <__ssputs_r+0x46>

0800889c <_svfiprintf_r>:
 800889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a0:	4698      	mov	r8, r3
 80088a2:	898b      	ldrh	r3, [r1, #12]
 80088a4:	4607      	mov	r7, r0
 80088a6:	061b      	lsls	r3, r3, #24
 80088a8:	460d      	mov	r5, r1
 80088aa:	4614      	mov	r4, r2
 80088ac:	b09d      	sub	sp, #116	; 0x74
 80088ae:	d50e      	bpl.n	80088ce <_svfiprintf_r+0x32>
 80088b0:	690b      	ldr	r3, [r1, #16]
 80088b2:	b963      	cbnz	r3, 80088ce <_svfiprintf_r+0x32>
 80088b4:	2140      	movs	r1, #64	; 0x40
 80088b6:	f000 fb25 	bl	8008f04 <_malloc_r>
 80088ba:	6028      	str	r0, [r5, #0]
 80088bc:	6128      	str	r0, [r5, #16]
 80088be:	b920      	cbnz	r0, 80088ca <_svfiprintf_r+0x2e>
 80088c0:	230c      	movs	r3, #12
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	f04f 30ff 	mov.w	r0, #4294967295
 80088c8:	e0d1      	b.n	8008a6e <_svfiprintf_r+0x1d2>
 80088ca:	2340      	movs	r3, #64	; 0x40
 80088cc:	616b      	str	r3, [r5, #20]
 80088ce:	2300      	movs	r3, #0
 80088d0:	9309      	str	r3, [sp, #36]	; 0x24
 80088d2:	2320      	movs	r3, #32
 80088d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088d8:	2330      	movs	r3, #48	; 0x30
 80088da:	f04f 0901 	mov.w	r9, #1
 80088de:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a88 <_svfiprintf_r+0x1ec>
 80088e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ea:	4623      	mov	r3, r4
 80088ec:	469a      	mov	sl, r3
 80088ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f2:	b10a      	cbz	r2, 80088f8 <_svfiprintf_r+0x5c>
 80088f4:	2a25      	cmp	r2, #37	; 0x25
 80088f6:	d1f9      	bne.n	80088ec <_svfiprintf_r+0x50>
 80088f8:	ebba 0b04 	subs.w	fp, sl, r4
 80088fc:	d00b      	beq.n	8008916 <_svfiprintf_r+0x7a>
 80088fe:	465b      	mov	r3, fp
 8008900:	4622      	mov	r2, r4
 8008902:	4629      	mov	r1, r5
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff ff6e 	bl	80087e6 <__ssputs_r>
 800890a:	3001      	adds	r0, #1
 800890c:	f000 80aa 	beq.w	8008a64 <_svfiprintf_r+0x1c8>
 8008910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008912:	445a      	add	r2, fp
 8008914:	9209      	str	r2, [sp, #36]	; 0x24
 8008916:	f89a 3000 	ldrb.w	r3, [sl]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80a2 	beq.w	8008a64 <_svfiprintf_r+0x1c8>
 8008920:	2300      	movs	r3, #0
 8008922:	f04f 32ff 	mov.w	r2, #4294967295
 8008926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800892a:	f10a 0a01 	add.w	sl, sl, #1
 800892e:	9304      	str	r3, [sp, #16]
 8008930:	9307      	str	r3, [sp, #28]
 8008932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008936:	931a      	str	r3, [sp, #104]	; 0x68
 8008938:	4654      	mov	r4, sl
 800893a:	2205      	movs	r2, #5
 800893c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008940:	4851      	ldr	r0, [pc, #324]	; (8008a88 <_svfiprintf_r+0x1ec>)
 8008942:	f000 fa41 	bl	8008dc8 <memchr>
 8008946:	9a04      	ldr	r2, [sp, #16]
 8008948:	b9d8      	cbnz	r0, 8008982 <_svfiprintf_r+0xe6>
 800894a:	06d0      	lsls	r0, r2, #27
 800894c:	bf44      	itt	mi
 800894e:	2320      	movmi	r3, #32
 8008950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008954:	0711      	lsls	r1, r2, #28
 8008956:	bf44      	itt	mi
 8008958:	232b      	movmi	r3, #43	; 0x2b
 800895a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800895e:	f89a 3000 	ldrb.w	r3, [sl]
 8008962:	2b2a      	cmp	r3, #42	; 0x2a
 8008964:	d015      	beq.n	8008992 <_svfiprintf_r+0xf6>
 8008966:	4654      	mov	r4, sl
 8008968:	2000      	movs	r0, #0
 800896a:	f04f 0c0a 	mov.w	ip, #10
 800896e:	9a07      	ldr	r2, [sp, #28]
 8008970:	4621      	mov	r1, r4
 8008972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008976:	3b30      	subs	r3, #48	; 0x30
 8008978:	2b09      	cmp	r3, #9
 800897a:	d94e      	bls.n	8008a1a <_svfiprintf_r+0x17e>
 800897c:	b1b0      	cbz	r0, 80089ac <_svfiprintf_r+0x110>
 800897e:	9207      	str	r2, [sp, #28]
 8008980:	e014      	b.n	80089ac <_svfiprintf_r+0x110>
 8008982:	eba0 0308 	sub.w	r3, r0, r8
 8008986:	fa09 f303 	lsl.w	r3, r9, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	46a2      	mov	sl, r4
 800898e:	9304      	str	r3, [sp, #16]
 8008990:	e7d2      	b.n	8008938 <_svfiprintf_r+0x9c>
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	1d19      	adds	r1, r3, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	9103      	str	r1, [sp, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfbb      	ittet	lt
 800899e:	425b      	neglt	r3, r3
 80089a0:	f042 0202 	orrlt.w	r2, r2, #2
 80089a4:	9307      	strge	r3, [sp, #28]
 80089a6:	9307      	strlt	r3, [sp, #28]
 80089a8:	bfb8      	it	lt
 80089aa:	9204      	strlt	r2, [sp, #16]
 80089ac:	7823      	ldrb	r3, [r4, #0]
 80089ae:	2b2e      	cmp	r3, #46	; 0x2e
 80089b0:	d10c      	bne.n	80089cc <_svfiprintf_r+0x130>
 80089b2:	7863      	ldrb	r3, [r4, #1]
 80089b4:	2b2a      	cmp	r3, #42	; 0x2a
 80089b6:	d135      	bne.n	8008a24 <_svfiprintf_r+0x188>
 80089b8:	9b03      	ldr	r3, [sp, #12]
 80089ba:	3402      	adds	r4, #2
 80089bc:	1d1a      	adds	r2, r3, #4
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	9203      	str	r2, [sp, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bfb8      	it	lt
 80089c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80089ca:	9305      	str	r3, [sp, #20]
 80089cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008a8c <_svfiprintf_r+0x1f0>
 80089d0:	2203      	movs	r2, #3
 80089d2:	4650      	mov	r0, sl
 80089d4:	7821      	ldrb	r1, [r4, #0]
 80089d6:	f000 f9f7 	bl	8008dc8 <memchr>
 80089da:	b140      	cbz	r0, 80089ee <_svfiprintf_r+0x152>
 80089dc:	2340      	movs	r3, #64	; 0x40
 80089de:	eba0 000a 	sub.w	r0, r0, sl
 80089e2:	fa03 f000 	lsl.w	r0, r3, r0
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	3401      	adds	r4, #1
 80089ea:	4303      	orrs	r3, r0
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f2:	2206      	movs	r2, #6
 80089f4:	4826      	ldr	r0, [pc, #152]	; (8008a90 <_svfiprintf_r+0x1f4>)
 80089f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089fa:	f000 f9e5 	bl	8008dc8 <memchr>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d038      	beq.n	8008a74 <_svfiprintf_r+0x1d8>
 8008a02:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <_svfiprintf_r+0x1f8>)
 8008a04:	bb1b      	cbnz	r3, 8008a4e <_svfiprintf_r+0x1b2>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	3307      	adds	r3, #7
 8008a0a:	f023 0307 	bic.w	r3, r3, #7
 8008a0e:	3308      	adds	r3, #8
 8008a10:	9303      	str	r3, [sp, #12]
 8008a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a14:	4433      	add	r3, r6
 8008a16:	9309      	str	r3, [sp, #36]	; 0x24
 8008a18:	e767      	b.n	80088ea <_svfiprintf_r+0x4e>
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a22:	e7a5      	b.n	8008970 <_svfiprintf_r+0xd4>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f04f 0c0a 	mov.w	ip, #10
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	3401      	adds	r4, #1
 8008a2e:	9305      	str	r3, [sp, #20]
 8008a30:	4620      	mov	r0, r4
 8008a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a36:	3a30      	subs	r2, #48	; 0x30
 8008a38:	2a09      	cmp	r2, #9
 8008a3a:	d903      	bls.n	8008a44 <_svfiprintf_r+0x1a8>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d0c5      	beq.n	80089cc <_svfiprintf_r+0x130>
 8008a40:	9105      	str	r1, [sp, #20]
 8008a42:	e7c3      	b.n	80089cc <_svfiprintf_r+0x130>
 8008a44:	4604      	mov	r4, r0
 8008a46:	2301      	movs	r3, #1
 8008a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a4c:	e7f0      	b.n	8008a30 <_svfiprintf_r+0x194>
 8008a4e:	ab03      	add	r3, sp, #12
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	462a      	mov	r2, r5
 8008a54:	4638      	mov	r0, r7
 8008a56:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <_svfiprintf_r+0x1fc>)
 8008a58:	a904      	add	r1, sp, #16
 8008a5a:	f3af 8000 	nop.w
 8008a5e:	1c42      	adds	r2, r0, #1
 8008a60:	4606      	mov	r6, r0
 8008a62:	d1d6      	bne.n	8008a12 <_svfiprintf_r+0x176>
 8008a64:	89ab      	ldrh	r3, [r5, #12]
 8008a66:	065b      	lsls	r3, r3, #25
 8008a68:	f53f af2c 	bmi.w	80088c4 <_svfiprintf_r+0x28>
 8008a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a6e:	b01d      	add	sp, #116	; 0x74
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	ab03      	add	r3, sp, #12
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	462a      	mov	r2, r5
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <_svfiprintf_r+0x1fc>)
 8008a7e:	a904      	add	r1, sp, #16
 8008a80:	f000 f87c 	bl	8008b7c <_printf_i>
 8008a84:	e7eb      	b.n	8008a5e <_svfiprintf_r+0x1c2>
 8008a86:	bf00      	nop
 8008a88:	0800919a 	.word	0x0800919a
 8008a8c:	080091a0 	.word	0x080091a0
 8008a90:	080091a4 	.word	0x080091a4
 8008a94:	00000000 	.word	0x00000000
 8008a98:	080087e7 	.word	0x080087e7

08008a9c <_printf_common>:
 8008a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa0:	4616      	mov	r6, r2
 8008aa2:	4699      	mov	r9, r3
 8008aa4:	688a      	ldr	r2, [r1, #8]
 8008aa6:	690b      	ldr	r3, [r1, #16]
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	bfb8      	it	lt
 8008aae:	4613      	movlt	r3, r2
 8008ab0:	6033      	str	r3, [r6, #0]
 8008ab2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008abc:	b10a      	cbz	r2, 8008ac2 <_printf_common+0x26>
 8008abe:	3301      	adds	r3, #1
 8008ac0:	6033      	str	r3, [r6, #0]
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	0699      	lsls	r1, r3, #26
 8008ac6:	bf42      	ittt	mi
 8008ac8:	6833      	ldrmi	r3, [r6, #0]
 8008aca:	3302      	addmi	r3, #2
 8008acc:	6033      	strmi	r3, [r6, #0]
 8008ace:	6825      	ldr	r5, [r4, #0]
 8008ad0:	f015 0506 	ands.w	r5, r5, #6
 8008ad4:	d106      	bne.n	8008ae4 <_printf_common+0x48>
 8008ad6:	f104 0a19 	add.w	sl, r4, #25
 8008ada:	68e3      	ldr	r3, [r4, #12]
 8008adc:	6832      	ldr	r2, [r6, #0]
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	dc28      	bgt.n	8008b36 <_printf_common+0x9a>
 8008ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ae8:	1e13      	subs	r3, r2, #0
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	bf18      	it	ne
 8008aee:	2301      	movne	r3, #1
 8008af0:	0692      	lsls	r2, r2, #26
 8008af2:	d42d      	bmi.n	8008b50 <_printf_common+0xb4>
 8008af4:	4649      	mov	r1, r9
 8008af6:	4638      	mov	r0, r7
 8008af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008afc:	47c0      	blx	r8
 8008afe:	3001      	adds	r0, #1
 8008b00:	d020      	beq.n	8008b44 <_printf_common+0xa8>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	68e5      	ldr	r5, [r4, #12]
 8008b06:	f003 0306 	and.w	r3, r3, #6
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	bf18      	it	ne
 8008b0e:	2500      	movne	r5, #0
 8008b10:	6832      	ldr	r2, [r6, #0]
 8008b12:	f04f 0600 	mov.w	r6, #0
 8008b16:	68a3      	ldr	r3, [r4, #8]
 8008b18:	bf08      	it	eq
 8008b1a:	1aad      	subeq	r5, r5, r2
 8008b1c:	6922      	ldr	r2, [r4, #16]
 8008b1e:	bf08      	it	eq
 8008b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfc4      	itt	gt
 8008b28:	1a9b      	subgt	r3, r3, r2
 8008b2a:	18ed      	addgt	r5, r5, r3
 8008b2c:	341a      	adds	r4, #26
 8008b2e:	42b5      	cmp	r5, r6
 8008b30:	d11a      	bne.n	8008b68 <_printf_common+0xcc>
 8008b32:	2000      	movs	r0, #0
 8008b34:	e008      	b.n	8008b48 <_printf_common+0xac>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4652      	mov	r2, sl
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	47c0      	blx	r8
 8008b40:	3001      	adds	r0, #1
 8008b42:	d103      	bne.n	8008b4c <_printf_common+0xb0>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	e7c4      	b.n	8008ada <_printf_common+0x3e>
 8008b50:	2030      	movs	r0, #48	; 0x30
 8008b52:	18e1      	adds	r1, r4, r3
 8008b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b5e:	4422      	add	r2, r4
 8008b60:	3302      	adds	r3, #2
 8008b62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b66:	e7c5      	b.n	8008af4 <_printf_common+0x58>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	4638      	mov	r0, r7
 8008b70:	47c0      	blx	r8
 8008b72:	3001      	adds	r0, #1
 8008b74:	d0e6      	beq.n	8008b44 <_printf_common+0xa8>
 8008b76:	3601      	adds	r6, #1
 8008b78:	e7d9      	b.n	8008b2e <_printf_common+0x92>
	...

08008b7c <_printf_i>:
 8008b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	7e0f      	ldrb	r7, [r1, #24]
 8008b82:	4691      	mov	r9, r2
 8008b84:	2f78      	cmp	r7, #120	; 0x78
 8008b86:	4680      	mov	r8, r0
 8008b88:	460c      	mov	r4, r1
 8008b8a:	469a      	mov	sl, r3
 8008b8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b92:	d807      	bhi.n	8008ba4 <_printf_i+0x28>
 8008b94:	2f62      	cmp	r7, #98	; 0x62
 8008b96:	d80a      	bhi.n	8008bae <_printf_i+0x32>
 8008b98:	2f00      	cmp	r7, #0
 8008b9a:	f000 80d9 	beq.w	8008d50 <_printf_i+0x1d4>
 8008b9e:	2f58      	cmp	r7, #88	; 0x58
 8008ba0:	f000 80a4 	beq.w	8008cec <_printf_i+0x170>
 8008ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bac:	e03a      	b.n	8008c24 <_printf_i+0xa8>
 8008bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bb2:	2b15      	cmp	r3, #21
 8008bb4:	d8f6      	bhi.n	8008ba4 <_printf_i+0x28>
 8008bb6:	a101      	add	r1, pc, #4	; (adr r1, 8008bbc <_printf_i+0x40>)
 8008bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bbc:	08008c15 	.word	0x08008c15
 8008bc0:	08008c29 	.word	0x08008c29
 8008bc4:	08008ba5 	.word	0x08008ba5
 8008bc8:	08008ba5 	.word	0x08008ba5
 8008bcc:	08008ba5 	.word	0x08008ba5
 8008bd0:	08008ba5 	.word	0x08008ba5
 8008bd4:	08008c29 	.word	0x08008c29
 8008bd8:	08008ba5 	.word	0x08008ba5
 8008bdc:	08008ba5 	.word	0x08008ba5
 8008be0:	08008ba5 	.word	0x08008ba5
 8008be4:	08008ba5 	.word	0x08008ba5
 8008be8:	08008d37 	.word	0x08008d37
 8008bec:	08008c59 	.word	0x08008c59
 8008bf0:	08008d19 	.word	0x08008d19
 8008bf4:	08008ba5 	.word	0x08008ba5
 8008bf8:	08008ba5 	.word	0x08008ba5
 8008bfc:	08008d59 	.word	0x08008d59
 8008c00:	08008ba5 	.word	0x08008ba5
 8008c04:	08008c59 	.word	0x08008c59
 8008c08:	08008ba5 	.word	0x08008ba5
 8008c0c:	08008ba5 	.word	0x08008ba5
 8008c10:	08008d21 	.word	0x08008d21
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	1d1a      	adds	r2, r3, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	602a      	str	r2, [r5, #0]
 8008c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0a4      	b.n	8008d72 <_printf_i+0x1f6>
 8008c28:	6820      	ldr	r0, [r4, #0]
 8008c2a:	6829      	ldr	r1, [r5, #0]
 8008c2c:	0606      	lsls	r6, r0, #24
 8008c2e:	f101 0304 	add.w	r3, r1, #4
 8008c32:	d50a      	bpl.n	8008c4a <_printf_i+0xce>
 8008c34:	680e      	ldr	r6, [r1, #0]
 8008c36:	602b      	str	r3, [r5, #0]
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	da03      	bge.n	8008c44 <_printf_i+0xc8>
 8008c3c:	232d      	movs	r3, #45	; 0x2d
 8008c3e:	4276      	negs	r6, r6
 8008c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c44:	230a      	movs	r3, #10
 8008c46:	485e      	ldr	r0, [pc, #376]	; (8008dc0 <_printf_i+0x244>)
 8008c48:	e019      	b.n	8008c7e <_printf_i+0x102>
 8008c4a:	680e      	ldr	r6, [r1, #0]
 8008c4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	bf18      	it	ne
 8008c54:	b236      	sxthne	r6, r6
 8008c56:	e7ef      	b.n	8008c38 <_printf_i+0xbc>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	1d19      	adds	r1, r3, #4
 8008c5e:	6029      	str	r1, [r5, #0]
 8008c60:	0601      	lsls	r1, r0, #24
 8008c62:	d501      	bpl.n	8008c68 <_printf_i+0xec>
 8008c64:	681e      	ldr	r6, [r3, #0]
 8008c66:	e002      	b.n	8008c6e <_printf_i+0xf2>
 8008c68:	0646      	lsls	r6, r0, #25
 8008c6a:	d5fb      	bpl.n	8008c64 <_printf_i+0xe8>
 8008c6c:	881e      	ldrh	r6, [r3, #0]
 8008c6e:	2f6f      	cmp	r7, #111	; 0x6f
 8008c70:	bf0c      	ite	eq
 8008c72:	2308      	moveq	r3, #8
 8008c74:	230a      	movne	r3, #10
 8008c76:	4852      	ldr	r0, [pc, #328]	; (8008dc0 <_printf_i+0x244>)
 8008c78:	2100      	movs	r1, #0
 8008c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c7e:	6865      	ldr	r5, [r4, #4]
 8008c80:	2d00      	cmp	r5, #0
 8008c82:	bfa8      	it	ge
 8008c84:	6821      	ldrge	r1, [r4, #0]
 8008c86:	60a5      	str	r5, [r4, #8]
 8008c88:	bfa4      	itt	ge
 8008c8a:	f021 0104 	bicge.w	r1, r1, #4
 8008c8e:	6021      	strge	r1, [r4, #0]
 8008c90:	b90e      	cbnz	r6, 8008c96 <_printf_i+0x11a>
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	d04d      	beq.n	8008d32 <_printf_i+0x1b6>
 8008c96:	4615      	mov	r5, r2
 8008c98:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c9c:	fb03 6711 	mls	r7, r3, r1, r6
 8008ca0:	5dc7      	ldrb	r7, [r0, r7]
 8008ca2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ca6:	4637      	mov	r7, r6
 8008ca8:	42bb      	cmp	r3, r7
 8008caa:	460e      	mov	r6, r1
 8008cac:	d9f4      	bls.n	8008c98 <_printf_i+0x11c>
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d10b      	bne.n	8008cca <_printf_i+0x14e>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	07de      	lsls	r6, r3, #31
 8008cb6:	d508      	bpl.n	8008cca <_printf_i+0x14e>
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	6861      	ldr	r1, [r4, #4]
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	bfde      	ittt	le
 8008cc0:	2330      	movle	r3, #48	; 0x30
 8008cc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cca:	1b52      	subs	r2, r2, r5
 8008ccc:	6122      	str	r2, [r4, #16]
 8008cce:	464b      	mov	r3, r9
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	f8cd a000 	str.w	sl, [sp]
 8008cd8:	aa03      	add	r2, sp, #12
 8008cda:	f7ff fedf 	bl	8008a9c <_printf_common>
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d14c      	bne.n	8008d7c <_printf_i+0x200>
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce6:	b004      	add	sp, #16
 8008ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cec:	4834      	ldr	r0, [pc, #208]	; (8008dc0 <_printf_i+0x244>)
 8008cee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cf2:	6829      	ldr	r1, [r5, #0]
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cfa:	6029      	str	r1, [r5, #0]
 8008cfc:	061d      	lsls	r5, r3, #24
 8008cfe:	d514      	bpl.n	8008d2a <_printf_i+0x1ae>
 8008d00:	07df      	lsls	r7, r3, #31
 8008d02:	bf44      	itt	mi
 8008d04:	f043 0320 	orrmi.w	r3, r3, #32
 8008d08:	6023      	strmi	r3, [r4, #0]
 8008d0a:	b91e      	cbnz	r6, 8008d14 <_printf_i+0x198>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	f023 0320 	bic.w	r3, r3, #32
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	2310      	movs	r3, #16
 8008d16:	e7af      	b.n	8008c78 <_printf_i+0xfc>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	f043 0320 	orr.w	r3, r3, #32
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	2378      	movs	r3, #120	; 0x78
 8008d22:	4828      	ldr	r0, [pc, #160]	; (8008dc4 <_printf_i+0x248>)
 8008d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d28:	e7e3      	b.n	8008cf2 <_printf_i+0x176>
 8008d2a:	0659      	lsls	r1, r3, #25
 8008d2c:	bf48      	it	mi
 8008d2e:	b2b6      	uxthmi	r6, r6
 8008d30:	e7e6      	b.n	8008d00 <_printf_i+0x184>
 8008d32:	4615      	mov	r5, r2
 8008d34:	e7bb      	b.n	8008cae <_printf_i+0x132>
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	6826      	ldr	r6, [r4, #0]
 8008d3a:	1d18      	adds	r0, r3, #4
 8008d3c:	6961      	ldr	r1, [r4, #20]
 8008d3e:	6028      	str	r0, [r5, #0]
 8008d40:	0635      	lsls	r5, r6, #24
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	d501      	bpl.n	8008d4a <_printf_i+0x1ce>
 8008d46:	6019      	str	r1, [r3, #0]
 8008d48:	e002      	b.n	8008d50 <_printf_i+0x1d4>
 8008d4a:	0670      	lsls	r0, r6, #25
 8008d4c:	d5fb      	bpl.n	8008d46 <_printf_i+0x1ca>
 8008d4e:	8019      	strh	r1, [r3, #0]
 8008d50:	2300      	movs	r3, #0
 8008d52:	4615      	mov	r5, r2
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	e7ba      	b.n	8008cce <_printf_i+0x152>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	1d1a      	adds	r2, r3, #4
 8008d5e:	602a      	str	r2, [r5, #0]
 8008d60:	681d      	ldr	r5, [r3, #0]
 8008d62:	6862      	ldr	r2, [r4, #4]
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f82f 	bl	8008dc8 <memchr>
 8008d6a:	b108      	cbz	r0, 8008d70 <_printf_i+0x1f4>
 8008d6c:	1b40      	subs	r0, r0, r5
 8008d6e:	6060      	str	r0, [r4, #4]
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	2300      	movs	r3, #0
 8008d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7a:	e7a8      	b.n	8008cce <_printf_i+0x152>
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	47d0      	blx	sl
 8008d86:	3001      	adds	r0, #1
 8008d88:	d0ab      	beq.n	8008ce2 <_printf_i+0x166>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	079b      	lsls	r3, r3, #30
 8008d8e:	d413      	bmi.n	8008db8 <_printf_i+0x23c>
 8008d90:	68e0      	ldr	r0, [r4, #12]
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	4298      	cmp	r0, r3
 8008d96:	bfb8      	it	lt
 8008d98:	4618      	movlt	r0, r3
 8008d9a:	e7a4      	b.n	8008ce6 <_printf_i+0x16a>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4632      	mov	r2, r6
 8008da0:	4649      	mov	r1, r9
 8008da2:	4640      	mov	r0, r8
 8008da4:	47d0      	blx	sl
 8008da6:	3001      	adds	r0, #1
 8008da8:	d09b      	beq.n	8008ce2 <_printf_i+0x166>
 8008daa:	3501      	adds	r5, #1
 8008dac:	68e3      	ldr	r3, [r4, #12]
 8008dae:	9903      	ldr	r1, [sp, #12]
 8008db0:	1a5b      	subs	r3, r3, r1
 8008db2:	42ab      	cmp	r3, r5
 8008db4:	dcf2      	bgt.n	8008d9c <_printf_i+0x220>
 8008db6:	e7eb      	b.n	8008d90 <_printf_i+0x214>
 8008db8:	2500      	movs	r5, #0
 8008dba:	f104 0619 	add.w	r6, r4, #25
 8008dbe:	e7f5      	b.n	8008dac <_printf_i+0x230>
 8008dc0:	080091ab 	.word	0x080091ab
 8008dc4:	080091bc 	.word	0x080091bc

08008dc8 <memchr>:
 8008dc8:	4603      	mov	r3, r0
 8008dca:	b510      	push	{r4, lr}
 8008dcc:	b2c9      	uxtb	r1, r1
 8008dce:	4402      	add	r2, r0
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	d101      	bne.n	8008dda <memchr+0x12>
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	e003      	b.n	8008de2 <memchr+0x1a>
 8008dda:	7804      	ldrb	r4, [r0, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	428c      	cmp	r4, r1
 8008de0:	d1f6      	bne.n	8008dd0 <memchr+0x8>
 8008de2:	bd10      	pop	{r4, pc}

08008de4 <memcpy>:
 8008de4:	440a      	add	r2, r1
 8008de6:	4291      	cmp	r1, r2
 8008de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dec:	d100      	bne.n	8008df0 <memcpy+0xc>
 8008dee:	4770      	bx	lr
 8008df0:	b510      	push	{r4, lr}
 8008df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df6:	4291      	cmp	r1, r2
 8008df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dfc:	d1f9      	bne.n	8008df2 <memcpy+0xe>
 8008dfe:	bd10      	pop	{r4, pc}

08008e00 <memmove>:
 8008e00:	4288      	cmp	r0, r1
 8008e02:	b510      	push	{r4, lr}
 8008e04:	eb01 0402 	add.w	r4, r1, r2
 8008e08:	d902      	bls.n	8008e10 <memmove+0x10>
 8008e0a:	4284      	cmp	r4, r0
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	d807      	bhi.n	8008e20 <memmove+0x20>
 8008e10:	1e43      	subs	r3, r0, #1
 8008e12:	42a1      	cmp	r1, r4
 8008e14:	d008      	beq.n	8008e28 <memmove+0x28>
 8008e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e1e:	e7f8      	b.n	8008e12 <memmove+0x12>
 8008e20:	4601      	mov	r1, r0
 8008e22:	4402      	add	r2, r0
 8008e24:	428a      	cmp	r2, r1
 8008e26:	d100      	bne.n	8008e2a <memmove+0x2a>
 8008e28:	bd10      	pop	{r4, pc}
 8008e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e32:	e7f7      	b.n	8008e24 <memmove+0x24>

08008e34 <_free_r>:
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4605      	mov	r5, r0
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	d040      	beq.n	8008ebe <_free_r+0x8a>
 8008e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e40:	1f0c      	subs	r4, r1, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfb8      	it	lt
 8008e46:	18e4      	addlt	r4, r4, r3
 8008e48:	f000 f910 	bl	800906c <__malloc_lock>
 8008e4c:	4a1c      	ldr	r2, [pc, #112]	; (8008ec0 <_free_r+0x8c>)
 8008e4e:	6813      	ldr	r3, [r2, #0]
 8008e50:	b933      	cbnz	r3, 8008e60 <_free_r+0x2c>
 8008e52:	6063      	str	r3, [r4, #4]
 8008e54:	6014      	str	r4, [r2, #0]
 8008e56:	4628      	mov	r0, r5
 8008e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e5c:	f000 b90c 	b.w	8009078 <__malloc_unlock>
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d908      	bls.n	8008e76 <_free_r+0x42>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	1821      	adds	r1, r4, r0
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf01      	itttt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	1809      	addeq	r1, r1, r0
 8008e72:	6021      	streq	r1, [r4, #0]
 8008e74:	e7ed      	b.n	8008e52 <_free_r+0x1e>
 8008e76:	461a      	mov	r2, r3
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	b10b      	cbz	r3, 8008e80 <_free_r+0x4c>
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d9fa      	bls.n	8008e76 <_free_r+0x42>
 8008e80:	6811      	ldr	r1, [r2, #0]
 8008e82:	1850      	adds	r0, r2, r1
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d10b      	bne.n	8008ea0 <_free_r+0x6c>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	4401      	add	r1, r0
 8008e8c:	1850      	adds	r0, r2, r1
 8008e8e:	4283      	cmp	r3, r0
 8008e90:	6011      	str	r1, [r2, #0]
 8008e92:	d1e0      	bne.n	8008e56 <_free_r+0x22>
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	4401      	add	r1, r0
 8008e9a:	6011      	str	r1, [r2, #0]
 8008e9c:	6053      	str	r3, [r2, #4]
 8008e9e:	e7da      	b.n	8008e56 <_free_r+0x22>
 8008ea0:	d902      	bls.n	8008ea8 <_free_r+0x74>
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	e7d6      	b.n	8008e56 <_free_r+0x22>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	1821      	adds	r1, r4, r0
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1809      	addeq	r1, r1, r0
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	6054      	str	r4, [r2, #4]
 8008ebc:	e7cb      	b.n	8008e56 <_free_r+0x22>
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20001cc8 	.word	0x20001cc8

08008ec4 <sbrk_aligned>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4e0e      	ldr	r6, [pc, #56]	; (8008f00 <sbrk_aligned+0x3c>)
 8008ec8:	460c      	mov	r4, r1
 8008eca:	6831      	ldr	r1, [r6, #0]
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b911      	cbnz	r1, 8008ed6 <sbrk_aligned+0x12>
 8008ed0:	f000 f8bc 	bl	800904c <_sbrk_r>
 8008ed4:	6030      	str	r0, [r6, #0]
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 f8b7 	bl	800904c <_sbrk_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d00a      	beq.n	8008ef8 <sbrk_aligned+0x34>
 8008ee2:	1cc4      	adds	r4, r0, #3
 8008ee4:	f024 0403 	bic.w	r4, r4, #3
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d007      	beq.n	8008efc <sbrk_aligned+0x38>
 8008eec:	1a21      	subs	r1, r4, r0
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f8ac 	bl	800904c <_sbrk_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d101      	bne.n	8008efc <sbrk_aligned+0x38>
 8008ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8008efc:	4620      	mov	r0, r4
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	20001ccc 	.word	0x20001ccc

08008f04 <_malloc_r>:
 8008f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	1ccd      	adds	r5, r1, #3
 8008f0a:	f025 0503 	bic.w	r5, r5, #3
 8008f0e:	3508      	adds	r5, #8
 8008f10:	2d0c      	cmp	r5, #12
 8008f12:	bf38      	it	cc
 8008f14:	250c      	movcc	r5, #12
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	4607      	mov	r7, r0
 8008f1a:	db01      	blt.n	8008f20 <_malloc_r+0x1c>
 8008f1c:	42a9      	cmp	r1, r5
 8008f1e:	d905      	bls.n	8008f2c <_malloc_r+0x28>
 8008f20:	230c      	movs	r3, #12
 8008f22:	2600      	movs	r6, #0
 8008f24:	603b      	str	r3, [r7, #0]
 8008f26:	4630      	mov	r0, r6
 8008f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2c:	4e2e      	ldr	r6, [pc, #184]	; (8008fe8 <_malloc_r+0xe4>)
 8008f2e:	f000 f89d 	bl	800906c <__malloc_lock>
 8008f32:	6833      	ldr	r3, [r6, #0]
 8008f34:	461c      	mov	r4, r3
 8008f36:	bb34      	cbnz	r4, 8008f86 <_malloc_r+0x82>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f7ff ffc2 	bl	8008ec4 <sbrk_aligned>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	4604      	mov	r4, r0
 8008f44:	d14d      	bne.n	8008fe2 <_malloc_r+0xde>
 8008f46:	6834      	ldr	r4, [r6, #0]
 8008f48:	4626      	mov	r6, r4
 8008f4a:	2e00      	cmp	r6, #0
 8008f4c:	d140      	bne.n	8008fd0 <_malloc_r+0xcc>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	4631      	mov	r1, r6
 8008f52:	4638      	mov	r0, r7
 8008f54:	eb04 0803 	add.w	r8, r4, r3
 8008f58:	f000 f878 	bl	800904c <_sbrk_r>
 8008f5c:	4580      	cmp	r8, r0
 8008f5e:	d13a      	bne.n	8008fd6 <_malloc_r+0xd2>
 8008f60:	6821      	ldr	r1, [r4, #0]
 8008f62:	3503      	adds	r5, #3
 8008f64:	1a6d      	subs	r5, r5, r1
 8008f66:	f025 0503 	bic.w	r5, r5, #3
 8008f6a:	3508      	adds	r5, #8
 8008f6c:	2d0c      	cmp	r5, #12
 8008f6e:	bf38      	it	cc
 8008f70:	250c      	movcc	r5, #12
 8008f72:	4638      	mov	r0, r7
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7ff ffa5 	bl	8008ec4 <sbrk_aligned>
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d02b      	beq.n	8008fd6 <_malloc_r+0xd2>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	442b      	add	r3, r5
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	e00e      	b.n	8008fa4 <_malloc_r+0xa0>
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	1b52      	subs	r2, r2, r5
 8008f8a:	d41e      	bmi.n	8008fca <_malloc_r+0xc6>
 8008f8c:	2a0b      	cmp	r2, #11
 8008f8e:	d916      	bls.n	8008fbe <_malloc_r+0xba>
 8008f90:	1961      	adds	r1, r4, r5
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	6025      	str	r5, [r4, #0]
 8008f96:	bf18      	it	ne
 8008f98:	6059      	strne	r1, [r3, #4]
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	bf08      	it	eq
 8008f9e:	6031      	streq	r1, [r6, #0]
 8008fa0:	5162      	str	r2, [r4, r5]
 8008fa2:	604b      	str	r3, [r1, #4]
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	f104 060b 	add.w	r6, r4, #11
 8008faa:	f000 f865 	bl	8009078 <__malloc_unlock>
 8008fae:	f026 0607 	bic.w	r6, r6, #7
 8008fb2:	1d23      	adds	r3, r4, #4
 8008fb4:	1af2      	subs	r2, r6, r3
 8008fb6:	d0b6      	beq.n	8008f26 <_malloc_r+0x22>
 8008fb8:	1b9b      	subs	r3, r3, r6
 8008fba:	50a3      	str	r3, [r4, r2]
 8008fbc:	e7b3      	b.n	8008f26 <_malloc_r+0x22>
 8008fbe:	6862      	ldr	r2, [r4, #4]
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	bf0c      	ite	eq
 8008fc4:	6032      	streq	r2, [r6, #0]
 8008fc6:	605a      	strne	r2, [r3, #4]
 8008fc8:	e7ec      	b.n	8008fa4 <_malloc_r+0xa0>
 8008fca:	4623      	mov	r3, r4
 8008fcc:	6864      	ldr	r4, [r4, #4]
 8008fce:	e7b2      	b.n	8008f36 <_malloc_r+0x32>
 8008fd0:	4634      	mov	r4, r6
 8008fd2:	6876      	ldr	r6, [r6, #4]
 8008fd4:	e7b9      	b.n	8008f4a <_malloc_r+0x46>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	4638      	mov	r0, r7
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	f000 f84c 	bl	8009078 <__malloc_unlock>
 8008fe0:	e7a1      	b.n	8008f26 <_malloc_r+0x22>
 8008fe2:	6025      	str	r5, [r4, #0]
 8008fe4:	e7de      	b.n	8008fa4 <_malloc_r+0xa0>
 8008fe6:	bf00      	nop
 8008fe8:	20001cc8 	.word	0x20001cc8

08008fec <_realloc_r>:
 8008fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff0:	4680      	mov	r8, r0
 8008ff2:	4614      	mov	r4, r2
 8008ff4:	460e      	mov	r6, r1
 8008ff6:	b921      	cbnz	r1, 8009002 <_realloc_r+0x16>
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffe:	f7ff bf81 	b.w	8008f04 <_malloc_r>
 8009002:	b92a      	cbnz	r2, 8009010 <_realloc_r+0x24>
 8009004:	f7ff ff16 	bl	8008e34 <_free_r>
 8009008:	4625      	mov	r5, r4
 800900a:	4628      	mov	r0, r5
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	f000 f838 	bl	8009084 <_malloc_usable_size_r>
 8009014:	4284      	cmp	r4, r0
 8009016:	4607      	mov	r7, r0
 8009018:	d802      	bhi.n	8009020 <_realloc_r+0x34>
 800901a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800901e:	d812      	bhi.n	8009046 <_realloc_r+0x5a>
 8009020:	4621      	mov	r1, r4
 8009022:	4640      	mov	r0, r8
 8009024:	f7ff ff6e 	bl	8008f04 <_malloc_r>
 8009028:	4605      	mov	r5, r0
 800902a:	2800      	cmp	r0, #0
 800902c:	d0ed      	beq.n	800900a <_realloc_r+0x1e>
 800902e:	42bc      	cmp	r4, r7
 8009030:	4622      	mov	r2, r4
 8009032:	4631      	mov	r1, r6
 8009034:	bf28      	it	cs
 8009036:	463a      	movcs	r2, r7
 8009038:	f7ff fed4 	bl	8008de4 <memcpy>
 800903c:	4631      	mov	r1, r6
 800903e:	4640      	mov	r0, r8
 8009040:	f7ff fef8 	bl	8008e34 <_free_r>
 8009044:	e7e1      	b.n	800900a <_realloc_r+0x1e>
 8009046:	4635      	mov	r5, r6
 8009048:	e7df      	b.n	800900a <_realloc_r+0x1e>
	...

0800904c <_sbrk_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	2300      	movs	r3, #0
 8009050:	4d05      	ldr	r5, [pc, #20]	; (8009068 <_sbrk_r+0x1c>)
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f7 fc30 	bl	80008bc <_sbrk>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_sbrk_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_sbrk_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20001cd0 	.word	0x20001cd0

0800906c <__malloc_lock>:
 800906c:	4801      	ldr	r0, [pc, #4]	; (8009074 <__malloc_lock+0x8>)
 800906e:	f000 b811 	b.w	8009094 <__retarget_lock_acquire_recursive>
 8009072:	bf00      	nop
 8009074:	20001cd4 	.word	0x20001cd4

08009078 <__malloc_unlock>:
 8009078:	4801      	ldr	r0, [pc, #4]	; (8009080 <__malloc_unlock+0x8>)
 800907a:	f000 b80c 	b.w	8009096 <__retarget_lock_release_recursive>
 800907e:	bf00      	nop
 8009080:	20001cd4 	.word	0x20001cd4

08009084 <_malloc_usable_size_r>:
 8009084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009088:	1f18      	subs	r0, r3, #4
 800908a:	2b00      	cmp	r3, #0
 800908c:	bfbc      	itt	lt
 800908e:	580b      	ldrlt	r3, [r1, r0]
 8009090:	18c0      	addlt	r0, r0, r3
 8009092:	4770      	bx	lr

08009094 <__retarget_lock_acquire_recursive>:
 8009094:	4770      	bx	lr

08009096 <__retarget_lock_release_recursive>:
 8009096:	4770      	bx	lr

08009098 <_init>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr

080090a4 <_fini>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	bf00      	nop
 80090a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090aa:	bc08      	pop	{r3}
 80090ac:	469e      	mov	lr, r3
 80090ae:	4770      	bx	lr
